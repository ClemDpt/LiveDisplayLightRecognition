/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@serialport/binding-mock/dist/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@serialport/binding-mock/dist/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nvar debugFactory = __webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\");\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar debugFactory__default = /*#__PURE__*/_interopDefaultLegacy(debugFactory);\n\nconst debug = debugFactory__default[\"default\"]('serialport/binding-mock');\nlet ports = {};\nlet serialNumber = 0;\nfunction resolveNextTick() {\n    return new Promise(resolve => process.nextTick(() => resolve()));\n}\nclass CanceledError extends Error {\n    constructor(message) {\n        super(message);\n        this.canceled = true;\n    }\n}\nconst MockBinding = {\n    reset() {\n        ports = {};\n        serialNumber = 0;\n    },\n    // Create a mock port\n    createPort(path, options = {}) {\n        serialNumber++;\n        const optWithDefaults = Object.assign({ echo: false, record: false, manufacturer: 'The J5 Robotics Company', vendorId: undefined, productId: undefined, maxReadSize: 1024 }, options);\n        ports[path] = {\n            data: Buffer.alloc(0),\n            echo: optWithDefaults.echo,\n            record: optWithDefaults.record,\n            readyData: optWithDefaults.readyData,\n            maxReadSize: optWithDefaults.maxReadSize,\n            info: {\n                path,\n                manufacturer: optWithDefaults.manufacturer,\n                serialNumber: `${serialNumber}`,\n                pnpId: undefined,\n                locationId: undefined,\n                vendorId: optWithDefaults.vendorId,\n                productId: optWithDefaults.productId,\n            },\n        };\n        debug(serialNumber, 'created port', JSON.stringify({ path, opt: options }));\n    },\n    async list() {\n        debug(null, 'list');\n        return Object.values(ports).map(port => port.info);\n    },\n    async open(options) {\n        var _a;\n        if (!options || typeof options !== 'object' || Array.isArray(options)) {\n            throw new TypeError('\"options\" is not an object');\n        }\n        if (!options.path) {\n            throw new TypeError('\"path\" is not a valid port');\n        }\n        if (!options.baudRate) {\n            throw new TypeError('\"baudRate\" is not a valid baudRate');\n        }\n        const openOptions = Object.assign({ dataBits: 8, lock: true, stopBits: 1, parity: 'none', rtscts: false, xon: false, xoff: false, xany: false, hupcl: true }, options);\n        const { path } = openOptions;\n        debug(null, `open: opening path ${path}`);\n        const port = ports[path];\n        await resolveNextTick();\n        if (!port) {\n            throw new Error(`Port does not exist - please call MockBinding.createPort('${path}') first`);\n        }\n        const serialNumber = port.info.serialNumber;\n        if ((_a = port.openOpt) === null || _a === void 0 ? void 0 : _a.lock) {\n            debug(serialNumber, 'open: Port is locked cannot open');\n            throw new Error('Port is locked cannot open');\n        }\n        debug(serialNumber, `open: opened path ${path}`);\n        port.openOpt = Object.assign({}, openOptions);\n        return new MockPortBinding(port, openOptions);\n    },\n};\n/**\n * Mock bindings for pretend serialport access\n */\nclass MockPortBinding {\n    constructor(port, openOptions) {\n        this.port = port;\n        this.openOptions = openOptions;\n        this.pendingRead = null;\n        this.isOpen = true;\n        this.lastWrite = null;\n        this.recording = Buffer.alloc(0);\n        this.writeOperation = null; // in flight promise or null\n        this.serialNumber = port.info.serialNumber;\n        if (port.readyData) {\n            const data = port.readyData;\n            process.nextTick(() => {\n                if (this.isOpen) {\n                    debug(this.serialNumber, 'emitting ready data');\n                    this.emitData(data);\n                }\n            });\n        }\n    }\n    // Emit data on a mock port\n    emitData(data) {\n        if (!this.isOpen || !this.port) {\n            throw new Error('Port must be open to pretend to receive data');\n        }\n        const bufferData = Buffer.isBuffer(data) ? data : Buffer.from(data);\n        debug(this.serialNumber, 'emitting data - pending read:', Boolean(this.pendingRead));\n        this.port.data = Buffer.concat([this.port.data, bufferData]);\n        if (this.pendingRead) {\n            process.nextTick(this.pendingRead);\n            this.pendingRead = null;\n        }\n    }\n    async close() {\n        debug(this.serialNumber, 'close');\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        const port = this.port;\n        if (!port) {\n            throw new Error('already closed');\n        }\n        port.openOpt = undefined;\n        // reset data on close\n        port.data = Buffer.alloc(0);\n        debug(this.serialNumber, 'port is closed');\n        this.serialNumber = undefined;\n        this.isOpen = false;\n        if (this.pendingRead) {\n            this.pendingRead(new CanceledError('port is closed'));\n        }\n    }\n    async read(buffer, offset, length) {\n        if (!Buffer.isBuffer(buffer)) {\n            throw new TypeError('\"buffer\" is not a Buffer');\n        }\n        if (typeof offset !== 'number' || isNaN(offset)) {\n            throw new TypeError(`\"offset\" is not an integer got \"${isNaN(offset) ? 'NaN' : typeof offset}\"`);\n        }\n        if (typeof length !== 'number' || isNaN(length)) {\n            throw new TypeError(`\"length\" is not an integer got \"${isNaN(length) ? 'NaN' : typeof length}\"`);\n        }\n        if (buffer.length < offset + length) {\n            throw new Error('buffer is too small');\n        }\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        debug(this.serialNumber, 'read', length, 'bytes');\n        await resolveNextTick();\n        if (!this.isOpen || !this.port) {\n            throw new CanceledError('Read canceled');\n        }\n        if (this.port.data.length <= 0) {\n            return new Promise((resolve, reject) => {\n                this.pendingRead = err => {\n                    if (err) {\n                        return reject(err);\n                    }\n                    this.read(buffer, offset, length).then(resolve, reject);\n                };\n            });\n        }\n        const lengthToRead = this.port.maxReadSize > length ? length : this.port.maxReadSize;\n        const data = this.port.data.slice(0, lengthToRead);\n        const bytesRead = data.copy(buffer, offset);\n        this.port.data = this.port.data.slice(lengthToRead);\n        debug(this.serialNumber, 'read', bytesRead, 'bytes');\n        return { bytesRead, buffer };\n    }\n    async write(buffer) {\n        if (!Buffer.isBuffer(buffer)) {\n            throw new TypeError('\"buffer\" is not a Buffer');\n        }\n        if (!this.isOpen || !this.port) {\n            debug('write', 'error port is not open');\n            throw new Error('Port is not open');\n        }\n        debug(this.serialNumber, 'write', buffer.length, 'bytes');\n        if (this.writeOperation) {\n            throw new Error('Overlapping writes are not supported and should be queued by the serialport object');\n        }\n        this.writeOperation = (async () => {\n            await resolveNextTick();\n            if (!this.isOpen || !this.port) {\n                throw new Error('Write canceled');\n            }\n            const data = (this.lastWrite = Buffer.from(buffer)); // copy\n            if (this.port.record) {\n                this.recording = Buffer.concat([this.recording, data]);\n            }\n            if (this.port.echo) {\n                process.nextTick(() => {\n                    if (this.isOpen) {\n                        this.emitData(data);\n                    }\n                });\n            }\n            this.writeOperation = null;\n            debug(this.serialNumber, 'writing finished');\n        })();\n        return this.writeOperation;\n    }\n    async update(options) {\n        if (typeof options !== 'object') {\n            throw TypeError('\"options\" is not an object');\n        }\n        if (typeof options.baudRate !== 'number') {\n            throw new TypeError('\"options.baudRate\" is not a number');\n        }\n        debug(this.serialNumber, 'update');\n        if (!this.isOpen || !this.port) {\n            throw new Error('Port is not open');\n        }\n        await resolveNextTick();\n        if (this.port.openOpt) {\n            this.port.openOpt.baudRate = options.baudRate;\n        }\n    }\n    async set(options) {\n        if (typeof options !== 'object') {\n            throw new TypeError('\"options\" is not an object');\n        }\n        debug(this.serialNumber, 'set');\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        await resolveNextTick();\n    }\n    async get() {\n        debug(this.serialNumber, 'get');\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        await resolveNextTick();\n        return {\n            cts: true,\n            dsr: false,\n            dcd: false,\n        };\n    }\n    async getBaudRate() {\n        var _a;\n        debug(this.serialNumber, 'getBaudRate');\n        if (!this.isOpen || !this.port) {\n            throw new Error('Port is not open');\n        }\n        await resolveNextTick();\n        if (!((_a = this.port.openOpt) === null || _a === void 0 ? void 0 : _a.baudRate)) {\n            throw new Error('Internal Error');\n        }\n        return {\n            baudRate: this.port.openOpt.baudRate,\n        };\n    }\n    async flush() {\n        debug(this.serialNumber, 'flush');\n        if (!this.isOpen || !this.port) {\n            throw new Error('Port is not open');\n        }\n        await resolveNextTick();\n        this.port.data = Buffer.alloc(0);\n    }\n    async drain() {\n        debug(this.serialNumber, 'drain');\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        await this.writeOperation;\n        await resolveNextTick();\n    }\n}\n\nexports.CanceledError = CanceledError;\nexports.MockBinding = MockBinding;\nexports.MockPortBinding = MockPortBinding;\n\n\n//# sourceURL=webpack://basic-socket/./node_modules/@serialport/binding-mock/dist/index.js?");

/***/ }),

/***/ "./node_modules/@serialport/bindings-cpp/dist/darwin.js":
/*!**************************************************************!*\
  !*** ./node_modules/@serialport/bindings-cpp/dist/darwin.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DarwinPortBinding = exports.DarwinBinding = void 0;\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\"));\nconst load_bindings_1 = __webpack_require__(/*! ./load-bindings */ \"./node_modules/@serialport/bindings-cpp/dist/load-bindings.js\");\nconst poller_1 = __webpack_require__(/*! ./poller */ \"./node_modules/@serialport/bindings-cpp/dist/poller.js\");\nconst unix_read_1 = __webpack_require__(/*! ./unix-read */ \"./node_modules/@serialport/bindings-cpp/dist/unix-read.js\");\nconst unix_write_1 = __webpack_require__(/*! ./unix-write */ \"./node_modules/@serialport/bindings-cpp/dist/unix-write.js\");\nconst debug = (0, debug_1.default)('serialport/bindings-cpp');\nexports.DarwinBinding = {\n    list() {\n        debug('list');\n        return (0, load_bindings_1.asyncList)();\n    },\n    async open(options) {\n        if (!options || typeof options !== 'object' || Array.isArray(options)) {\n            throw new TypeError('\"options\" is not an object');\n        }\n        if (!options.path) {\n            throw new TypeError('\"path\" is not a valid port');\n        }\n        if (!options.baudRate) {\n            throw new TypeError('\"baudRate\" is not a valid baudRate');\n        }\n        debug('open');\n        const openOptions = Object.assign({ vmin: 1, vtime: 0, dataBits: 8, lock: true, stopBits: 1, parity: 'none', rtscts: false, xon: false, xoff: false, xany: false, hupcl: true }, options);\n        const fd = await (0, load_bindings_1.asyncOpen)(openOptions.path, openOptions);\n        return new DarwinPortBinding(fd, openOptions);\n    },\n};\n/**\n * The Darwin binding layer for OSX\n */\nclass DarwinPortBinding {\n    constructor(fd, options) {\n        this.fd = fd;\n        this.openOptions = options;\n        this.poller = new poller_1.Poller(fd);\n        this.writeOperation = null;\n    }\n    get isOpen() {\n        return this.fd !== null;\n    }\n    async close() {\n        debug('close');\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        const fd = this.fd;\n        this.poller.stop();\n        this.poller.destroy();\n        this.fd = null;\n        await (0, load_bindings_1.asyncClose)(fd);\n    }\n    async read(buffer, offset, length) {\n        if (!Buffer.isBuffer(buffer)) {\n            throw new TypeError('\"buffer\" is not a Buffer');\n        }\n        if (typeof offset !== 'number' || isNaN(offset)) {\n            throw new TypeError(`\"offset\" is not an integer got \"${isNaN(offset) ? 'NaN' : typeof offset}\"`);\n        }\n        if (typeof length !== 'number' || isNaN(length)) {\n            throw new TypeError(`\"length\" is not an integer got \"${isNaN(length) ? 'NaN' : typeof length}\"`);\n        }\n        debug('read');\n        if (buffer.length < offset + length) {\n            throw new Error('buffer is too small');\n        }\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        return (0, unix_read_1.unixRead)({ binding: this, buffer, offset, length });\n    }\n    async write(buffer) {\n        if (!Buffer.isBuffer(buffer)) {\n            throw new TypeError('\"buffer\" is not a Buffer');\n        }\n        debug('write', buffer.length, 'bytes');\n        if (!this.isOpen) {\n            debug('write', 'error port is not open');\n            throw new Error('Port is not open');\n        }\n        this.writeOperation = (async () => {\n            if (buffer.length === 0) {\n                return;\n            }\n            await (0, unix_write_1.unixWrite)({ binding: this, buffer });\n            this.writeOperation = null;\n        })();\n        return this.writeOperation;\n    }\n    async update(options) {\n        if (!options || typeof options !== 'object' || Array.isArray(options)) {\n            throw TypeError('\"options\" is not an object');\n        }\n        if (typeof options.baudRate !== 'number') {\n            throw new TypeError('\"options.baudRate\" is not a number');\n        }\n        debug('update');\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        await (0, load_bindings_1.asyncUpdate)(this.fd, options);\n    }\n    async set(options) {\n        if (!options || typeof options !== 'object' || Array.isArray(options)) {\n            throw new TypeError('\"options\" is not an object');\n        }\n        debug('set', options);\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        await (0, load_bindings_1.asyncSet)(this.fd, options);\n    }\n    async get() {\n        debug('get');\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        return (0, load_bindings_1.asyncGet)(this.fd);\n    }\n    async getBaudRate() {\n        debug('getBaudRate');\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        throw new Error('getBaudRate is not implemented on darwin');\n    }\n    async flush() {\n        debug('flush');\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        await (0, load_bindings_1.asyncFlush)(this.fd);\n    }\n    async drain() {\n        debug('drain');\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        await this.writeOperation;\n        await (0, load_bindings_1.asyncDrain)(this.fd);\n    }\n}\nexports.DarwinPortBinding = DarwinPortBinding;\n\n\n//# sourceURL=webpack://basic-socket/./node_modules/@serialport/bindings-cpp/dist/darwin.js?");

/***/ }),

/***/ "./node_modules/@serialport/bindings-cpp/dist/errors.js":
/*!**************************************************************!*\
  !*** ./node_modules/@serialport/bindings-cpp/dist/errors.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BindingsError = void 0;\nclass BindingsError extends Error {\n    constructor(message, { canceled = false } = {}) {\n        super(message);\n        this.canceled = canceled;\n    }\n}\nexports.BindingsError = BindingsError;\n\n\n//# sourceURL=webpack://basic-socket/./node_modules/@serialport/bindings-cpp/dist/errors.js?");

/***/ }),

/***/ "./node_modules/@serialport/bindings-cpp/dist/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@serialport/bindings-cpp/dist/index.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.autoDetect = void 0;\n/* eslint-disable @typescript-eslint/no-var-requires */\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\"));\nconst darwin_1 = __webpack_require__(/*! ./darwin */ \"./node_modules/@serialport/bindings-cpp/dist/darwin.js\");\nconst linux_1 = __webpack_require__(/*! ./linux */ \"./node_modules/@serialport/bindings-cpp/dist/linux.js\");\nconst win32_1 = __webpack_require__(/*! ./win32 */ \"./node_modules/@serialport/bindings-cpp/dist/win32.js\");\nconst debug = (0, debug_1.default)('serialport/bindings-cpp');\n__exportStar(__webpack_require__(/*! @serialport/bindings-interface */ \"./node_modules/@serialport/bindings-interface/dist/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./darwin */ \"./node_modules/@serialport/bindings-cpp/dist/darwin.js\"), exports);\n__exportStar(__webpack_require__(/*! ./linux */ \"./node_modules/@serialport/bindings-cpp/dist/linux.js\"), exports);\n__exportStar(__webpack_require__(/*! ./win32 */ \"./node_modules/@serialport/bindings-cpp/dist/win32.js\"), exports);\n__exportStar(__webpack_require__(/*! ./errors */ \"./node_modules/@serialport/bindings-cpp/dist/errors.js\"), exports);\n/**\n * This is an auto detected binding for your current platform\n */\nfunction autoDetect() {\n    switch (process.platform) {\n        case 'win32':\n            debug('loading WindowsBinding');\n            return win32_1.WindowsBinding;\n        case 'darwin':\n            debug('loading DarwinBinding');\n            return darwin_1.DarwinBinding;\n        default:\n            debug('loading LinuxBinding');\n            return linux_1.LinuxBinding;\n    }\n}\nexports.autoDetect = autoDetect;\n\n\n//# sourceURL=webpack://basic-socket/./node_modules/@serialport/bindings-cpp/dist/index.js?");

/***/ }),

/***/ "./node_modules/@serialport/bindings-cpp/dist/linux-list.js":
/*!******************************************************************!*\
  !*** ./node_modules/@serialport/bindings-cpp/dist/linux-list.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.linuxList = void 0;\nconst child_process_1 = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'child_process'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\nconst parser_readline_1 = __webpack_require__(/*! @serialport/parser-readline */ \"./node_modules/@serialport/parser-readline/dist/index.js\");\n// get only serial port names\nfunction checkPathOfDevice(path) {\n    return /(tty(S|WCH|ACM|USB|AMA|MFD|O|XRUSB)|rfcomm)/.test(path) && path;\n}\nfunction propName(name) {\n    return {\n        DEVNAME: 'path',\n        ID_VENDOR_ENC: 'manufacturer',\n        ID_SERIAL_SHORT: 'serialNumber',\n        ID_VENDOR_ID: 'vendorId',\n        ID_MODEL_ID: 'productId',\n        DEVLINKS: 'pnpId',\n    }[name.toUpperCase()];\n}\nfunction decodeHexEscape(str) {\n    return str.replace(/\\\\x([a-fA-F0-9]{2})/g, (a, b) => {\n        return String.fromCharCode(parseInt(b, 16));\n    });\n}\nfunction propVal(name, val) {\n    if (name === 'pnpId') {\n        const match = val.match(/\\/by-id\\/([^\\s]+)/);\n        return (match === null || match === void 0 ? void 0 : match[1]) || undefined;\n    }\n    if (name === 'manufacturer') {\n        return decodeHexEscape(val);\n    }\n    if (/^0x/.test(val)) {\n        return val.substr(2);\n    }\n    return val;\n}\nfunction linuxList(spawnCmd = child_process_1.spawn) {\n    const ports = [];\n    const udevadm = spawnCmd('udevadm', ['info', '-e']);\n    const lines = udevadm.stdout.pipe(new parser_readline_1.ReadlineParser());\n    let skipPort = false;\n    let port = {\n        path: '',\n        manufacturer: undefined,\n        serialNumber: undefined,\n        pnpId: undefined,\n        locationId: undefined,\n        vendorId: undefined,\n        productId: undefined,\n    };\n    lines.on('data', (line) => {\n        const lineType = line.slice(0, 1);\n        const data = line.slice(3);\n        // new port entry\n        if (lineType === 'P') {\n            port = {\n                path: '',\n                manufacturer: undefined,\n                serialNumber: undefined,\n                pnpId: undefined,\n                locationId: undefined,\n                vendorId: undefined,\n                productId: undefined,\n            };\n            skipPort = false;\n            return;\n        }\n        if (skipPort) {\n            return;\n        }\n        // Check dev name and save port if it matches flag to skip the rest of the data if not\n        if (lineType === 'N') {\n            if (checkPathOfDevice(data)) {\n                ports.push(port);\n            }\n            else {\n                skipPort = true;\n            }\n            return;\n        }\n        // parse data about each port\n        if (lineType === 'E') {\n            const keyValue = data.match(/^(.+)=(.*)/);\n            if (!keyValue) {\n                return;\n            }\n            const key = propName(keyValue[1]);\n            if (!key) {\n                return;\n            }\n            port[key] = propVal(key, keyValue[2]);\n        }\n    });\n    return new Promise((resolve, reject) => {\n        udevadm.on('close', (code) => {\n            if (code) {\n                reject(new Error(`Error listing ports udevadm exited with error code: ${code}`));\n            }\n        });\n        udevadm.on('error', reject);\n        lines.on('error', reject);\n        lines.on('finish', () => resolve(ports));\n    });\n}\nexports.linuxList = linuxList;\n\n\n//# sourceURL=webpack://basic-socket/./node_modules/@serialport/bindings-cpp/dist/linux-list.js?");

/***/ }),

/***/ "./node_modules/@serialport/bindings-cpp/dist/linux.js":
/*!*************************************************************!*\
  !*** ./node_modules/@serialport/bindings-cpp/dist/linux.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.LinuxPortBinding = exports.LinuxBinding = void 0;\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\"));\nconst linux_list_1 = __webpack_require__(/*! ./linux-list */ \"./node_modules/@serialport/bindings-cpp/dist/linux-list.js\");\nconst poller_1 = __webpack_require__(/*! ./poller */ \"./node_modules/@serialport/bindings-cpp/dist/poller.js\");\nconst unix_read_1 = __webpack_require__(/*! ./unix-read */ \"./node_modules/@serialport/bindings-cpp/dist/unix-read.js\");\nconst unix_write_1 = __webpack_require__(/*! ./unix-write */ \"./node_modules/@serialport/bindings-cpp/dist/unix-write.js\");\nconst load_bindings_1 = __webpack_require__(/*! ./load-bindings */ \"./node_modules/@serialport/bindings-cpp/dist/load-bindings.js\");\nconst debug = (0, debug_1.default)('serialport/bindings-cpp');\nexports.LinuxBinding = {\n    list() {\n        debug('list');\n        return (0, linux_list_1.linuxList)();\n    },\n    async open(options) {\n        if (!options || typeof options !== 'object' || Array.isArray(options)) {\n            throw new TypeError('\"options\" is not an object');\n        }\n        if (!options.path) {\n            throw new TypeError('\"path\" is not a valid port');\n        }\n        if (!options.baudRate) {\n            throw new TypeError('\"baudRate\" is not a valid baudRate');\n        }\n        debug('open');\n        const openOptions = Object.assign({ vmin: 1, vtime: 0, dataBits: 8, lock: true, stopBits: 1, parity: 'none', rtscts: false, xon: false, xoff: false, xany: false, hupcl: true }, options);\n        const fd = await (0, load_bindings_1.asyncOpen)(openOptions.path, openOptions);\n        this.fd = fd;\n        return new LinuxPortBinding(fd, openOptions);\n    },\n};\n/**\n * The linux binding layer\n */\nclass LinuxPortBinding {\n    constructor(fd, openOptions) {\n        this.fd = fd;\n        this.openOptions = openOptions;\n        this.poller = new poller_1.Poller(fd);\n        this.writeOperation = null;\n    }\n    get isOpen() {\n        return this.fd !== null;\n    }\n    async close() {\n        debug('close');\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        const fd = this.fd;\n        this.poller.stop();\n        this.poller.destroy();\n        this.fd = null;\n        await (0, load_bindings_1.asyncClose)(fd);\n    }\n    async read(buffer, offset, length) {\n        if (!Buffer.isBuffer(buffer)) {\n            throw new TypeError('\"buffer\" is not a Buffer');\n        }\n        if (typeof offset !== 'number' || isNaN(offset)) {\n            throw new TypeError(`\"offset\" is not an integer got \"${isNaN(offset) ? 'NaN' : typeof offset}\"`);\n        }\n        if (typeof length !== 'number' || isNaN(length)) {\n            throw new TypeError(`\"length\" is not an integer got \"${isNaN(length) ? 'NaN' : typeof length}\"`);\n        }\n        debug('read');\n        if (buffer.length < offset + length) {\n            throw new Error('buffer is too small');\n        }\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        return (0, unix_read_1.unixRead)({ binding: this, buffer, offset, length });\n    }\n    async write(buffer) {\n        if (!Buffer.isBuffer(buffer)) {\n            throw new TypeError('\"buffer\" is not a Buffer');\n        }\n        debug('write', buffer.length, 'bytes');\n        if (!this.isOpen) {\n            debug('write', 'error port is not open');\n            throw new Error('Port is not open');\n        }\n        this.writeOperation = (async () => {\n            if (buffer.length === 0) {\n                return;\n            }\n            await (0, unix_write_1.unixWrite)({ binding: this, buffer });\n            this.writeOperation = null;\n        })();\n        return this.writeOperation;\n    }\n    async update(options) {\n        if (!options || typeof options !== 'object' || Array.isArray(options)) {\n            throw TypeError('\"options\" is not an object');\n        }\n        if (typeof options.baudRate !== 'number') {\n            throw new TypeError('\"options.baudRate\" is not a number');\n        }\n        debug('update');\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        await (0, load_bindings_1.asyncUpdate)(this.fd, options);\n    }\n    async set(options) {\n        if (!options || typeof options !== 'object' || Array.isArray(options)) {\n            throw new TypeError('\"options\" is not an object');\n        }\n        debug('set');\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        await (0, load_bindings_1.asyncSet)(this.fd, options);\n    }\n    async get() {\n        debug('get');\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        return (0, load_bindings_1.asyncGet)(this.fd);\n    }\n    async getBaudRate() {\n        debug('getBaudRate');\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        return (0, load_bindings_1.asyncGetBaudRate)(this.fd);\n    }\n    async flush() {\n        debug('flush');\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        await (0, load_bindings_1.asyncFlush)(this.fd);\n    }\n    async drain() {\n        debug('drain');\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        await this.writeOperation;\n        await (0, load_bindings_1.asyncDrain)(this.fd);\n    }\n}\nexports.LinuxPortBinding = LinuxPortBinding;\n\n\n//# sourceURL=webpack://basic-socket/./node_modules/@serialport/bindings-cpp/dist/linux.js?");

/***/ }),

/***/ "./node_modules/@serialport/bindings-cpp/dist/load-bindings.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@serialport/bindings-cpp/dist/load-bindings.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("var __dirname = \"/\";\n\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.asyncWrite = exports.asyncRead = exports.asyncUpdate = exports.asyncSet = exports.asyncOpen = exports.asyncList = exports.asyncGetBaudRate = exports.asyncGet = exports.asyncFlush = exports.asyncDrain = exports.asyncClose = void 0;\nconst node_gyp_build_1 = __importDefault(__webpack_require__(/*! node-gyp-build */ \"./node_modules/node-gyp-build/index.js\"));\nconst util_1 = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'util'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\nconst path_1 = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'path'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst binding = (0, node_gyp_build_1.default)((0, path_1.join)(__dirname, '../'));\nexports.asyncClose = binding.close ? (0, util_1.promisify)(binding.close) : async () => { throw new Error('\"binding.close\" Method not implemented'); };\nexports.asyncDrain = binding.drain ? (0, util_1.promisify)(binding.drain) : async () => { throw new Error('\"binding.drain\" Method not implemented'); };\nexports.asyncFlush = binding.flush ? (0, util_1.promisify)(binding.flush) : async () => { throw new Error('\"binding.flush\" Method not implemented'); };\nexports.asyncGet = binding.get ? (0, util_1.promisify)(binding.get) : async () => { throw new Error('\"binding.get\" Method not implemented'); };\nexports.asyncGetBaudRate = binding.getBaudRate ? (0, util_1.promisify)(binding.getBaudRate) : async () => { throw new Error('\"binding.getBaudRate\" Method not implemented'); };\nexports.asyncList = binding.list ? (0, util_1.promisify)(binding.list) : async () => { throw new Error('\"binding.list\" Method not implemented'); };\nexports.asyncOpen = binding.open ? (0, util_1.promisify)(binding.open) : async () => { throw new Error('\"binding.open\" Method not implemented'); };\nexports.asyncSet = binding.set ? (0, util_1.promisify)(binding.set) : async () => { throw new Error('\"binding.set\" Method not implemented'); };\nexports.asyncUpdate = binding.update ? (0, util_1.promisify)(binding.update) : async () => { throw new Error('\"binding.update\" Method not implemented'); };\nexports.asyncRead = binding.read ? (0, util_1.promisify)(binding.read) : async () => { throw new Error('\"binding.read\" Method not implemented'); };\nexports.asyncWrite = binding.read ? (0, util_1.promisify)(binding.write) : async () => { throw new Error('\"binding.write\" Method not implemented'); };\n\n\n//# sourceURL=webpack://basic-socket/./node_modules/@serialport/bindings-cpp/dist/load-bindings.js?");

/***/ }),

/***/ "./node_modules/@serialport/bindings-cpp/dist/poller.js":
/*!**************************************************************!*\
  !*** ./node_modules/@serialport/bindings-cpp/dist/poller.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("var __dirname = \"/\";\n\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Poller = exports.EVENTS = void 0;\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\"));\nconst events_1 = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\nconst path_1 = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'path'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\nconst node_gyp_build_1 = __importDefault(__webpack_require__(/*! node-gyp-build */ \"./node_modules/node-gyp-build/index.js\"));\nconst errors_1 = __webpack_require__(/*! ./errors */ \"./node_modules/@serialport/bindings-cpp/dist/errors.js\");\nconst { Poller: PollerBindings } = (0, node_gyp_build_1.default)((0, path_1.join)(__dirname, '../'));\nconst logger = (0, debug_1.default)('serialport/bindings-cpp/poller');\nexports.EVENTS = {\n    UV_READABLE: 0b0001,\n    UV_WRITABLE: 0b0010,\n    UV_DISCONNECT: 0b0100,\n};\nfunction handleEvent(error, eventFlag) {\n    if (error) {\n        logger('error', error);\n        this.emit('readable', error);\n        this.emit('writable', error);\n        this.emit('disconnect', error);\n        return;\n    }\n    if (eventFlag & exports.EVENTS.UV_READABLE) {\n        logger('received \"readable\"');\n        this.emit('readable', null);\n    }\n    if (eventFlag & exports.EVENTS.UV_WRITABLE) {\n        logger('received \"writable\"');\n        this.emit('writable', null);\n    }\n    if (eventFlag & exports.EVENTS.UV_DISCONNECT) {\n        logger('received \"disconnect\"');\n        this.emit('disconnect', null);\n    }\n}\n/**\n * Polls unix systems for readable or writable states of a file or serialport\n */\nclass Poller extends events_1.EventEmitter {\n    constructor(fd, FDPoller = PollerBindings) {\n        logger('Creating poller');\n        super();\n        this.poller = new FDPoller(fd, handleEvent.bind(this));\n    }\n    /**\n     * Wait for the next event to occur\n     * @param {string} event ('readable'|'writable'|'disconnect')\n     * @returns {Poller} returns itself\n     */\n    once(event, callback) {\n        switch (event) {\n            case 'readable':\n                this.poll(exports.EVENTS.UV_READABLE);\n                break;\n            case 'writable':\n                this.poll(exports.EVENTS.UV_WRITABLE);\n                break;\n            case 'disconnect':\n                this.poll(exports.EVENTS.UV_DISCONNECT);\n                break;\n        }\n        return super.once(event, callback);\n    }\n    /**\n     * Ask the bindings to listen for an event, it is recommend to use `.once()` for easy use\n     * @param {EVENTS} eventFlag polls for an event or group of events based upon a flag.\n     */\n    poll(eventFlag = 0) {\n        if (eventFlag & exports.EVENTS.UV_READABLE) {\n            logger('Polling for \"readable\"');\n        }\n        if (eventFlag & exports.EVENTS.UV_WRITABLE) {\n            logger('Polling for \"writable\"');\n        }\n        if (eventFlag & exports.EVENTS.UV_DISCONNECT) {\n            logger('Polling for \"disconnect\"');\n        }\n        this.poller.poll(eventFlag);\n    }\n    /**\n     * Stop listening for events and cancel all outstanding listening with an error\n     */\n    stop() {\n        logger('Stopping poller');\n        this.poller.stop();\n        this.emitCanceled();\n    }\n    destroy() {\n        logger('Destroying poller');\n        this.poller.destroy();\n        this.emitCanceled();\n    }\n    emitCanceled() {\n        const err = new errors_1.BindingsError('Canceled', { canceled: true });\n        this.emit('readable', err);\n        this.emit('writable', err);\n        this.emit('disconnect', err);\n    }\n}\nexports.Poller = Poller;\n\n\n//# sourceURL=webpack://basic-socket/./node_modules/@serialport/bindings-cpp/dist/poller.js?");

/***/ }),

/***/ "./node_modules/@serialport/bindings-cpp/dist/unix-read.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@serialport/bindings-cpp/dist/unix-read.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.unixRead = void 0;\nconst util_1 = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'util'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\nconst fs_1 = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'fs'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\nconst errors_1 = __webpack_require__(/*! ./errors */ \"./node_modules/@serialport/bindings-cpp/dist/errors.js\");\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\"));\nconst logger = (0, debug_1.default)('serialport/bindings-cpp/unixRead');\nconst readAsync = (0, util_1.promisify)(fs_1.read);\nconst readable = (binding) => {\n    return new Promise((resolve, reject) => {\n        if (!binding.poller) {\n            throw new Error('No poller on bindings');\n        }\n        binding.poller.once('readable', err => (err ? reject(err) : resolve()));\n    });\n};\nconst unixRead = async ({ binding, buffer, offset, length, fsReadAsync = readAsync, }) => {\n    logger('Starting read');\n    if (!binding.isOpen || !binding.fd) {\n        throw new errors_1.BindingsError('Port is not open', { canceled: true });\n    }\n    try {\n        const { bytesRead } = await fsReadAsync(binding.fd, buffer, offset, length, null);\n        if (bytesRead === 0) {\n            return (0, exports.unixRead)({ binding, buffer, offset, length, fsReadAsync });\n        }\n        logger('Finished read', bytesRead, 'bytes');\n        return { bytesRead, buffer };\n    }\n    catch (err) {\n        logger('read error', err);\n        if (err.code === 'EAGAIN' || err.code === 'EWOULDBLOCK' || err.code === 'EINTR') {\n            if (!binding.isOpen) {\n                throw new errors_1.BindingsError('Port is not open', { canceled: true });\n            }\n            logger('waiting for readable because of code:', err.code);\n            await readable(binding);\n            return (0, exports.unixRead)({ binding, buffer, offset, length, fsReadAsync });\n        }\n        const disconnectError = err.code === 'EBADF' || // Bad file number means we got closed\n            err.code === 'ENXIO' || // No such device or address probably usb disconnect\n            err.code === 'UNKNOWN' ||\n            err.errno === -1; // generic error\n        if (disconnectError) {\n            err.disconnect = true;\n            logger('disconnecting', err);\n        }\n        throw err;\n    }\n};\nexports.unixRead = unixRead;\n\n\n//# sourceURL=webpack://basic-socket/./node_modules/@serialport/bindings-cpp/dist/unix-read.js?");

/***/ }),

/***/ "./node_modules/@serialport/bindings-cpp/dist/unix-write.js":
/*!******************************************************************!*\
  !*** ./node_modules/@serialport/bindings-cpp/dist/unix-write.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.unixWrite = void 0;\nconst fs_1 = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'fs'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\"));\nconst util_1 = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'util'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\nconst logger = (0, debug_1.default)('serialport/bindings-cpp/unixWrite');\nconst writeAsync = (0, util_1.promisify)(fs_1.write);\nconst writable = (binding) => {\n    return new Promise((resolve, reject) => {\n        binding.poller.once('writable', err => (err ? reject(err) : resolve()));\n    });\n};\nconst unixWrite = async ({ binding, buffer, offset = 0, fsWriteAsync = writeAsync }) => {\n    const bytesToWrite = buffer.length - offset;\n    logger('Starting write', buffer.length, 'bytes offset', offset, 'bytesToWrite', bytesToWrite);\n    if (!binding.isOpen || !binding.fd) {\n        throw new Error('Port is not open');\n    }\n    try {\n        const { bytesWritten } = await fsWriteAsync(binding.fd, buffer, offset, bytesToWrite);\n        logger('write returned: wrote', bytesWritten, 'bytes');\n        if (bytesWritten + offset < buffer.length) {\n            if (!binding.isOpen) {\n                throw new Error('Port is not open');\n            }\n            return (0, exports.unixWrite)({ binding, buffer, offset: bytesWritten + offset, fsWriteAsync });\n        }\n        logger('Finished writing', bytesWritten + offset, 'bytes');\n    }\n    catch (err) {\n        logger('write errored', err);\n        if (err.code === 'EAGAIN' || err.code === 'EWOULDBLOCK' || err.code === 'EINTR') {\n            if (!binding.isOpen) {\n                throw new Error('Port is not open');\n            }\n            logger('waiting for writable because of code:', err.code);\n            await writable(binding);\n            return (0, exports.unixWrite)({ binding, buffer, offset, fsWriteAsync });\n        }\n        const disconnectError = err.code === 'EBADF' || // Bad file number means we got closed\n            err.code === 'ENXIO' || // No such device or address probably usb disconnect\n            err.code === 'UNKNOWN' ||\n            err.errno === -1; // generic error\n        if (disconnectError) {\n            err.disconnect = true;\n            logger('disconnecting', err);\n        }\n        logger('error', err);\n        throw err;\n    }\n};\nexports.unixWrite = unixWrite;\n\n\n//# sourceURL=webpack://basic-socket/./node_modules/@serialport/bindings-cpp/dist/unix-write.js?");

/***/ }),

/***/ "./node_modules/@serialport/bindings-cpp/dist/win32-sn-parser.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@serialport/bindings-cpp/dist/win32-sn-parser.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.serialNumParser = void 0;\nconst PARSERS = [/USB\\\\(?:.+)\\\\(.+)/, /FTDIBUS\\\\(?:.+)\\+(.+?)A?\\\\.+/];\nconst serialNumParser = (pnpId) => {\n    if (!pnpId) {\n        return null;\n    }\n    for (const parser of PARSERS) {\n        const sn = pnpId.match(parser);\n        if (sn) {\n            return sn[1];\n        }\n    }\n    return null;\n};\nexports.serialNumParser = serialNumParser;\n\n\n//# sourceURL=webpack://basic-socket/./node_modules/@serialport/bindings-cpp/dist/win32-sn-parser.js?");

/***/ }),

/***/ "./node_modules/@serialport/bindings-cpp/dist/win32.js":
/*!*************************************************************!*\
  !*** ./node_modules/@serialport/bindings-cpp/dist/win32.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WindowsPortBinding = exports.WindowsBinding = void 0;\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\"));\nconst _1 = __webpack_require__(/*! . */ \"./node_modules/@serialport/bindings-cpp/dist/index.js\");\nconst load_bindings_1 = __webpack_require__(/*! ./load-bindings */ \"./node_modules/@serialport/bindings-cpp/dist/load-bindings.js\");\nconst win32_sn_parser_1 = __webpack_require__(/*! ./win32-sn-parser */ \"./node_modules/@serialport/bindings-cpp/dist/win32-sn-parser.js\");\nconst debug = (0, debug_1.default)('serialport/bindings-cpp');\nexports.WindowsBinding = {\n    async list() {\n        const ports = await (0, load_bindings_1.asyncList)();\n        // Grab the serial number from the pnp id\n        return ports.map(port => {\n            if (port.pnpId && !port.serialNumber) {\n                const serialNumber = (0, win32_sn_parser_1.serialNumParser)(port.pnpId);\n                if (serialNumber) {\n                    return Object.assign(Object.assign({}, port), { serialNumber });\n                }\n            }\n            return port;\n        });\n    },\n    async open(options) {\n        if (!options || typeof options !== 'object' || Array.isArray(options)) {\n            throw new TypeError('\"options\" is not an object');\n        }\n        if (!options.path) {\n            throw new TypeError('\"path\" is not a valid port');\n        }\n        if (!options.baudRate) {\n            throw new TypeError('\"baudRate\" is not a valid baudRate');\n        }\n        debug('open');\n        const openOptions = Object.assign({ dataBits: 8, lock: true, stopBits: 1, parity: 'none', rtscts: false, rtsMode: 'handshake', xon: false, xoff: false, xany: false, hupcl: true }, options);\n        const fd = await (0, load_bindings_1.asyncOpen)(openOptions.path, openOptions);\n        return new WindowsPortBinding(fd, openOptions);\n    },\n};\n/**\n * The Windows binding layer\n */\nclass WindowsPortBinding {\n    constructor(fd, options) {\n        this.fd = fd;\n        this.openOptions = options;\n        this.writeOperation = null;\n    }\n    get isOpen() {\n        return this.fd !== null;\n    }\n    async close() {\n        debug('close');\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        const fd = this.fd;\n        this.fd = null;\n        await (0, load_bindings_1.asyncClose)(fd);\n    }\n    async read(buffer, offset, length) {\n        if (!Buffer.isBuffer(buffer)) {\n            throw new TypeError('\"buffer\" is not a Buffer');\n        }\n        if (typeof offset !== 'number' || isNaN(offset)) {\n            throw new TypeError(`\"offset\" is not an integer got \"${isNaN(offset) ? 'NaN' : typeof offset}\"`);\n        }\n        if (typeof length !== 'number' || isNaN(length)) {\n            throw new TypeError(`\"length\" is not an integer got \"${isNaN(length) ? 'NaN' : typeof length}\"`);\n        }\n        debug('read');\n        if (buffer.length < offset + length) {\n            throw new Error('buffer is too small');\n        }\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        try {\n            const bytesRead = await (0, load_bindings_1.asyncRead)(this.fd, buffer, offset, length);\n            return { bytesRead, buffer };\n        }\n        catch (err) {\n            if (!this.isOpen) {\n                throw new _1.BindingsError(err.message, { canceled: true });\n            }\n            throw err;\n        }\n    }\n    async write(buffer) {\n        if (!Buffer.isBuffer(buffer)) {\n            throw new TypeError('\"buffer\" is not a Buffer');\n        }\n        debug('write', buffer.length, 'bytes');\n        if (!this.isOpen) {\n            debug('write', 'error port is not open');\n            throw new Error('Port is not open');\n        }\n        this.writeOperation = (async () => {\n            if (buffer.length === 0) {\n                return;\n            }\n            await (0, load_bindings_1.asyncWrite)(this.fd, buffer);\n            this.writeOperation = null;\n        })();\n        return this.writeOperation;\n    }\n    async update(options) {\n        if (!options || typeof options !== 'object' || Array.isArray(options)) {\n            throw TypeError('\"options\" is not an object');\n        }\n        if (typeof options.baudRate !== 'number') {\n            throw new TypeError('\"options.baudRate\" is not a number');\n        }\n        debug('update');\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        await (0, load_bindings_1.asyncUpdate)(this.fd, options);\n    }\n    async set(options) {\n        if (!options || typeof options !== 'object' || Array.isArray(options)) {\n            throw new TypeError('\"options\" is not an object');\n        }\n        debug('set', options);\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        await (0, load_bindings_1.asyncSet)(this.fd, options);\n    }\n    async get() {\n        debug('get');\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        return (0, load_bindings_1.asyncGet)(this.fd);\n    }\n    async getBaudRate() {\n        debug('getBaudRate');\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        return (0, load_bindings_1.asyncGetBaudRate)(this.fd);\n    }\n    async flush() {\n        debug('flush');\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        await (0, load_bindings_1.asyncFlush)(this.fd);\n    }\n    async drain() {\n        debug('drain');\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        await this.writeOperation;\n        await (0, load_bindings_1.asyncDrain)(this.fd);\n    }\n}\nexports.WindowsPortBinding = WindowsPortBinding;\n\n\n//# sourceURL=webpack://basic-socket/./node_modules/@serialport/bindings-cpp/dist/win32.js?");

/***/ }),

/***/ "./node_modules/@serialport/bindings-interface/dist/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@serialport/bindings-interface/dist/index.js ***!
  \*******************************************************************/
/***/ (() => {

"use strict";
eval("\n\n\n\n//# sourceURL=webpack://basic-socket/./node_modules/@serialport/bindings-interface/dist/index.js?");

/***/ }),

/***/ "./node_modules/@serialport/parser-byte-length/dist/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@serialport/parser-byte-length/dist/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ByteLengthParser = void 0;\nconst stream_1 = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'stream'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n/**\n * Emit data every number of bytes\n *\n * A transform stream that emits data as a buffer after a specific number of bytes are received. Runs in O(n) time.\n */\nclass ByteLengthParser extends stream_1.Transform {\n    constructor(options) {\n        super(options);\n        if (typeof options.length !== 'number') {\n            throw new TypeError('\"length\" is not a number');\n        }\n        if (options.length < 1) {\n            throw new TypeError('\"length\" is not greater than 0');\n        }\n        this.length = options.length;\n        this.position = 0;\n        this.buffer = Buffer.alloc(this.length);\n    }\n    _transform(chunk, _encoding, cb) {\n        let cursor = 0;\n        while (cursor < chunk.length) {\n            this.buffer[this.position] = chunk[cursor];\n            cursor++;\n            this.position++;\n            if (this.position === this.length) {\n                this.push(this.buffer);\n                this.buffer = Buffer.alloc(this.length);\n                this.position = 0;\n            }\n        }\n        cb();\n    }\n    _flush(cb) {\n        this.push(this.buffer.slice(0, this.position));\n        this.buffer = Buffer.alloc(this.length);\n        cb();\n    }\n}\nexports.ByteLengthParser = ByteLengthParser;\n\n\n//# sourceURL=webpack://basic-socket/./node_modules/@serialport/parser-byte-length/dist/index.js?");

/***/ }),

/***/ "./node_modules/@serialport/parser-cctalk/dist/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@serialport/parser-cctalk/dist/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CCTalkParser = void 0;\nconst stream_1 = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'stream'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n/**\n * Parse the CCTalk protocol\n * @extends Transform\n *\n * A transform stream that emits CCTalk packets as they are received.\n */\nclass CCTalkParser extends stream_1.Transform {\n    constructor(maxDelayBetweenBytesMs = 50) {\n        super();\n        this.array = [];\n        this.cursor = 0;\n        this.lastByteFetchTime = 0;\n        this.maxDelayBetweenBytesMs = maxDelayBetweenBytesMs;\n    }\n    _transform(buffer, encoding, cb) {\n        if (this.maxDelayBetweenBytesMs > 0) {\n            const now = Date.now();\n            if (now - this.lastByteFetchTime > this.maxDelayBetweenBytesMs) {\n                this.array = [];\n                this.cursor = 0;\n            }\n            this.lastByteFetchTime = now;\n        }\n        this.cursor += buffer.length;\n        // TODO: Better Faster es7 no supported by node 4\n        // ES7 allows directly push [...buffer]\n        // this.array = this.array.concat(Array.from(buffer)) //Slower ?!?\n        Array.from(buffer).map(byte => this.array.push(byte));\n        while (this.cursor > 1 && this.cursor >= this.array[1] + 5) {\n            // full frame accumulated\n            // copy command from the array\n            const FullMsgLength = this.array[1] + 5;\n            const frame = Buffer.from(this.array.slice(0, FullMsgLength));\n            // Preserve Extra Data\n            this.array = this.array.slice(frame.length, this.array.length);\n            this.cursor -= FullMsgLength;\n            this.push(frame);\n        }\n        cb();\n    }\n}\nexports.CCTalkParser = CCTalkParser;\n\n\n//# sourceURL=webpack://basic-socket/./node_modules/@serialport/parser-cctalk/dist/index.js?");

/***/ }),

/***/ "./node_modules/@serialport/parser-delimiter/dist/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@serialport/parser-delimiter/dist/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DelimiterParser = void 0;\nconst stream_1 = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'stream'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n/**\n * A transform stream that emits data each time a byte sequence is received.\n * @extends Transform\n *\n * To use the `Delimiter` parser, provide a delimiter as a string, buffer, or array of bytes. Runs in O(n) time.\n */\nclass DelimiterParser extends stream_1.Transform {\n    constructor({ delimiter, includeDelimiter = false, ...options }) {\n        super(options);\n        if (delimiter === undefined) {\n            throw new TypeError('\"delimiter\" is not a bufferable object');\n        }\n        if (delimiter.length === 0) {\n            throw new TypeError('\"delimiter\" has a 0 or undefined length');\n        }\n        this.includeDelimiter = includeDelimiter;\n        this.delimiter = Buffer.from(delimiter);\n        this.buffer = Buffer.alloc(0);\n    }\n    _transform(chunk, encoding, cb) {\n        let data = Buffer.concat([this.buffer, chunk]);\n        let position;\n        while ((position = data.indexOf(this.delimiter)) !== -1) {\n            this.push(data.slice(0, position + (this.includeDelimiter ? this.delimiter.length : 0)));\n            data = data.slice(position + this.delimiter.length);\n        }\n        this.buffer = data;\n        cb();\n    }\n    _flush(cb) {\n        this.push(this.buffer);\n        this.buffer = Buffer.alloc(0);\n        cb();\n    }\n}\nexports.DelimiterParser = DelimiterParser;\n\n\n//# sourceURL=webpack://basic-socket/./node_modules/@serialport/parser-delimiter/dist/index.js?");

/***/ }),

/***/ "./node_modules/@serialport/parser-inter-byte-timeout/dist/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@serialport/parser-inter-byte-timeout/dist/index.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.InterByteTimeoutParser = void 0;\nconst stream_1 = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'stream'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n/**\n * A transform stream that buffers data and emits it after not receiving any bytes for the specified amount of time or hitting a max buffer size.\n */\nclass InterByteTimeoutParser extends stream_1.Transform {\n    constructor({ maxBufferSize = 65536, interval, ...transformOptions }) {\n        super(transformOptions);\n        if (!interval) {\n            throw new TypeError('\"interval\" is required');\n        }\n        if (typeof interval !== 'number' || Number.isNaN(interval)) {\n            throw new TypeError('\"interval\" is not a number');\n        }\n        if (interval < 1) {\n            throw new TypeError('\"interval\" is not greater than 0');\n        }\n        if (typeof maxBufferSize !== 'number' || Number.isNaN(maxBufferSize)) {\n            throw new TypeError('\"maxBufferSize\" is not a number');\n        }\n        if (maxBufferSize < 1) {\n            throw new TypeError('\"maxBufferSize\" is not greater than 0');\n        }\n        this.maxBufferSize = maxBufferSize;\n        this.currentPacket = [];\n        this.interval = interval;\n    }\n    _transform(chunk, encoding, cb) {\n        if (this.intervalID) {\n            clearTimeout(this.intervalID);\n        }\n        for (let offset = 0; offset < chunk.length; offset++) {\n            this.currentPacket.push(chunk[offset]);\n            if (this.currentPacket.length >= this.maxBufferSize) {\n                this.emitPacket();\n            }\n        }\n        this.intervalID = setTimeout(this.emitPacket.bind(this), this.interval);\n        cb();\n    }\n    emitPacket() {\n        if (this.intervalID) {\n            clearTimeout(this.intervalID);\n        }\n        if (this.currentPacket.length > 0) {\n            this.push(Buffer.from(this.currentPacket));\n        }\n        this.currentPacket = [];\n    }\n    _flush(cb) {\n        this.emitPacket();\n        cb();\n    }\n}\nexports.InterByteTimeoutParser = InterByteTimeoutParser;\n\n\n//# sourceURL=webpack://basic-socket/./node_modules/@serialport/parser-inter-byte-timeout/dist/index.js?");

/***/ }),

/***/ "./node_modules/@serialport/parser-packet-length/dist/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@serialport/parser-packet-length/dist/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PacketLengthParser = void 0;\nconst stream_1 = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'stream'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n/**\n * A transform stream that decodes packets with a delimiter and length of payload\n * specified within the data stream.\n * @extends Transform\n * @summary Decodes packets of the general form:\n *       [delimiter][len][payload0] ... [payload0 + len]\n *\n * The length field can be up to 4 bytes and can be at any offset within the packet\n *       [delimiter][header0][header1][len0][len1[payload0] ... [payload0 + len]\n *\n * The offset and number of bytes of the length field need to be provided in options\n * if not 1 byte immediately following the delimiter.\n */\nclass PacketLengthParser extends stream_1.Transform {\n    constructor(options = {}) {\n        super(options);\n        const { delimiter = 0xaa, packetOverhead = 2, lengthBytes = 1, lengthOffset = 1, maxLen = 0xff } = options;\n        this.opts = {\n            delimiter,\n            packetOverhead,\n            lengthBytes,\n            lengthOffset,\n            maxLen,\n        };\n        this.buffer = Buffer.alloc(0);\n        this.start = false;\n    }\n    _transform(chunk, encoding, cb) {\n        for (let ndx = 0; ndx < chunk.length; ndx++) {\n            const byte = chunk[ndx];\n            if (byte === this.opts.delimiter) {\n                this.start = true;\n            }\n            if (true === this.start) {\n                this.buffer = Buffer.concat([this.buffer, Buffer.from([byte])]);\n                if (this.buffer.length >= this.opts.lengthOffset + this.opts.lengthBytes) {\n                    const len = this.buffer.readUIntLE(this.opts.lengthOffset, this.opts.lengthBytes);\n                    if (this.buffer.length == len + this.opts.packetOverhead || len > this.opts.maxLen) {\n                        this.push(this.buffer);\n                        this.buffer = Buffer.alloc(0);\n                        this.start = false;\n                    }\n                }\n            }\n        }\n        cb();\n    }\n    _flush(cb) {\n        this.push(this.buffer);\n        this.buffer = Buffer.alloc(0);\n        cb();\n    }\n}\nexports.PacketLengthParser = PacketLengthParser;\n\n\n//# sourceURL=webpack://basic-socket/./node_modules/@serialport/parser-packet-length/dist/index.js?");

/***/ }),

/***/ "./node_modules/@serialport/parser-readline/dist/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@serialport/parser-readline/dist/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ReadlineParser = void 0;\nconst parser_delimiter_1 = __webpack_require__(/*! @serialport/parser-delimiter */ \"./node_modules/@serialport/parser-delimiter/dist/index.js\");\n/**\n *  A transform stream that emits data after a newline delimiter is received.\n * @summary To use the `Readline` parser, provide a delimiter (defaults to `\\n`). Data is emitted as string controllable by the `encoding` option (defaults to `utf8`).\n */\nclass ReadlineParser extends parser_delimiter_1.DelimiterParser {\n    constructor(options) {\n        const opts = {\n            delimiter: Buffer.from('\\n', 'utf8'),\n            encoding: 'utf8',\n            ...options,\n        };\n        if (typeof opts.delimiter === 'string') {\n            opts.delimiter = Buffer.from(opts.delimiter, opts.encoding);\n        }\n        super(opts);\n    }\n}\nexports.ReadlineParser = ReadlineParser;\n\n\n//# sourceURL=webpack://basic-socket/./node_modules/@serialport/parser-readline/dist/index.js?");

/***/ }),

/***/ "./node_modules/@serialport/parser-ready/dist/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@serialport/parser-ready/dist/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ReadyParser = void 0;\nconst stream_1 = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'stream'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n/**\n * A transform stream that waits for a sequence of \"ready\" bytes before emitting a ready event and emitting data events\n *\n * To use the `Ready` parser provide a byte start sequence. After the bytes have been received a ready event is fired and data events are passed through.\n */\nclass ReadyParser extends stream_1.Transform {\n    constructor({ delimiter, ...options }) {\n        if (delimiter === undefined) {\n            throw new TypeError('\"delimiter\" is not a bufferable object');\n        }\n        if (delimiter.length === 0) {\n            throw new TypeError('\"delimiter\" has a 0 or undefined length');\n        }\n        super(options);\n        this.delimiter = Buffer.from(delimiter);\n        this.readOffset = 0;\n        this.ready = false;\n    }\n    _transform(chunk, encoding, cb) {\n        if (this.ready) {\n            this.push(chunk);\n            return cb();\n        }\n        const delimiter = this.delimiter;\n        let chunkOffset = 0;\n        while (this.readOffset < delimiter.length && chunkOffset < chunk.length) {\n            if (delimiter[this.readOffset] === chunk[chunkOffset]) {\n                this.readOffset++;\n            }\n            else {\n                this.readOffset = 0;\n            }\n            chunkOffset++;\n        }\n        if (this.readOffset === delimiter.length) {\n            this.ready = true;\n            this.emit('ready');\n            const chunkRest = chunk.slice(chunkOffset);\n            if (chunkRest.length > 0) {\n                this.push(chunkRest);\n            }\n        }\n        cb();\n    }\n}\nexports.ReadyParser = ReadyParser;\n\n\n//# sourceURL=webpack://basic-socket/./node_modules/@serialport/parser-ready/dist/index.js?");

/***/ }),

/***/ "./node_modules/@serialport/parser-regex/dist/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@serialport/parser-regex/dist/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RegexParser = void 0;\nconst stream_1 = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'stream'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n/**\n * A transform stream that uses a regular expression to split the incoming text upon.\n *\n * To use the `Regex` parser provide a regular expression to split the incoming text upon. Data is emitted as string controllable by the `encoding` option (defaults to `utf8`).\n */\nclass RegexParser extends stream_1.Transform {\n    constructor({ regex, ...options }) {\n        const opts = {\n            encoding: 'utf8',\n            ...options,\n        };\n        if (regex === undefined) {\n            throw new TypeError('\"options.regex\" must be a regular expression pattern or object');\n        }\n        if (!(regex instanceof RegExp)) {\n            regex = new RegExp(regex.toString());\n        }\n        super(opts);\n        this.regex = regex;\n        this.data = '';\n    }\n    _transform(chunk, encoding, cb) {\n        const data = this.data + chunk;\n        const parts = data.split(this.regex);\n        this.data = parts.pop() || '';\n        parts.forEach(part => {\n            this.push(part);\n        });\n        cb();\n    }\n    _flush(cb) {\n        this.push(this.data);\n        this.data = '';\n        cb();\n    }\n}\nexports.RegexParser = RegexParser;\n\n\n//# sourceURL=webpack://basic-socket/./node_modules/@serialport/parser-regex/dist/index.js?");

/***/ }),

/***/ "./node_modules/@serialport/parser-slip-encoder/dist/decoder.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@serialport/parser-slip-encoder/dist/decoder.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SlipDecoder = void 0;\nconst stream_1 = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'stream'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n/**\n * A transform stream that decodes slip encoded data.\n * @extends Transform\n *\n * Runs in O(n) time, stripping out slip encoding and emitting decoded data. Optionally custom slip escape and delimiters can be provided.\n */\nclass SlipDecoder extends stream_1.Transform {\n    constructor(options = {}) {\n        super(options);\n        const { START, ESC = 0xdb, END = 0xc0, ESC_START, ESC_END = 0xdc, ESC_ESC = 0xdd } = options;\n        this.opts = {\n            START,\n            ESC,\n            END,\n            ESC_START,\n            ESC_END,\n            ESC_ESC,\n        };\n        this.buffer = Buffer.alloc(0);\n        this.escape = false;\n        this.start = false;\n    }\n    _transform(chunk, encoding, cb) {\n        for (let ndx = 0; ndx < chunk.length; ndx++) {\n            let byte = chunk[ndx];\n            if (byte === this.opts.START) {\n                this.start = true;\n                continue;\n            }\n            else if (undefined == this.opts.START) {\n                this.start = true;\n            }\n            if (this.escape) {\n                if (byte === this.opts.ESC_START && this.opts.START) {\n                    byte = this.opts.START;\n                }\n                else if (byte === this.opts.ESC_ESC) {\n                    byte = this.opts.ESC;\n                }\n                else if (byte === this.opts.ESC_END) {\n                    byte = this.opts.END;\n                }\n                else {\n                    this.escape = false;\n                    this.push(this.buffer);\n                    this.buffer = Buffer.alloc(0);\n                }\n            }\n            else {\n                if (byte === this.opts.ESC) {\n                    this.escape = true;\n                    continue;\n                }\n                if (byte === this.opts.END) {\n                    this.push(this.buffer);\n                    this.buffer = Buffer.alloc(0);\n                    this.escape = false;\n                    this.start = false;\n                    continue;\n                }\n            }\n            this.escape = false;\n            if (this.start) {\n                this.buffer = Buffer.concat([this.buffer, Buffer.from([byte])]);\n            }\n        }\n        cb();\n    }\n    _flush(cb) {\n        this.push(this.buffer);\n        this.buffer = Buffer.alloc(0);\n        cb();\n    }\n}\nexports.SlipDecoder = SlipDecoder;\n\n\n//# sourceURL=webpack://basic-socket/./node_modules/@serialport/parser-slip-encoder/dist/decoder.js?");

/***/ }),

/***/ "./node_modules/@serialport/parser-slip-encoder/dist/encoder.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@serialport/parser-slip-encoder/dist/encoder.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SlipEncoder = void 0;\nconst stream_1 = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'stream'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n/**\n * A transform stream that emits SLIP-encoded data for each incoming packet.\n *\n * Runs in O(n) time, adding a 0xC0 character at the end of each\n * received packet and escaping characters, according to RFC 1055.\n */\nclass SlipEncoder extends stream_1.Transform {\n    constructor(options = {}) {\n        super(options);\n        const { START, ESC = 0xdb, END = 0xc0, ESC_START, ESC_END = 0xdc, ESC_ESC = 0xdd, bluetoothQuirk = false } = options;\n        this.opts = {\n            START,\n            ESC,\n            END,\n            ESC_START,\n            ESC_END,\n            ESC_ESC,\n            bluetoothQuirk,\n        };\n    }\n    _transform(chunk, encoding, cb) {\n        const chunkLength = chunk.length;\n        if (this.opts.bluetoothQuirk && chunkLength === 0) {\n            // Edge case: push no data. Bluetooth-quirky SLIP parsers don't like\n            // lots of 0xC0s together.\n            return cb();\n        }\n        // Allocate memory for the worst-case scenario: all bytes are escaped,\n        // plus start and end separators.\n        const encoded = Buffer.alloc(chunkLength * 2 + 2);\n        let j = 0;\n        if (this.opts.bluetoothQuirk == true) {\n            encoded[j++] = this.opts.END;\n        }\n        if (this.opts.START !== undefined) {\n            encoded[j++] = this.opts.START;\n        }\n        for (let i = 0; i < chunkLength; i++) {\n            let byte = chunk[i];\n            if (byte === this.opts.START && this.opts.ESC_START) {\n                encoded[j++] = this.opts.ESC;\n                byte = this.opts.ESC_START;\n            }\n            else if (byte === this.opts.END) {\n                encoded[j++] = this.opts.ESC;\n                byte = this.opts.ESC_END;\n            }\n            else if (byte === this.opts.ESC) {\n                encoded[j++] = this.opts.ESC;\n                byte = this.opts.ESC_ESC;\n            }\n            encoded[j++] = byte;\n        }\n        encoded[j++] = this.opts.END;\n        cb(null, encoded.slice(0, j));\n    }\n}\nexports.SlipEncoder = SlipEncoder;\n\n\n//# sourceURL=webpack://basic-socket/./node_modules/@serialport/parser-slip-encoder/dist/encoder.js?");

/***/ }),

/***/ "./node_modules/@serialport/parser-slip-encoder/dist/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@serialport/parser-slip-encoder/dist/index.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./decoder */ \"./node_modules/@serialport/parser-slip-encoder/dist/decoder.js\"), exports);\n__exportStar(__webpack_require__(/*! ./encoder */ \"./node_modules/@serialport/parser-slip-encoder/dist/encoder.js\"), exports);\n\n\n//# sourceURL=webpack://basic-socket/./node_modules/@serialport/parser-slip-encoder/dist/index.js?");

/***/ }),

/***/ "./node_modules/@serialport/parser-spacepacket/dist/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@serialport/parser-spacepacket/dist/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SpacePacketParser = void 0;\nconst stream_1 = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'stream'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\nconst utils_1 = __webpack_require__(/*! ./utils */ \"./node_modules/@serialport/parser-spacepacket/dist/utils.js\");\n/**\n * A Transform stream that accepts a stream of octet data and converts it into an object\n * representation of a CCSDS Space Packet. See https://public.ccsds.org/Pubs/133x0b2e1.pdf for a\n * description of the Space Packet format.\n */\nclass SpacePacketParser extends stream_1.Transform {\n    /**\n     * A Transform stream that accepts a stream of octet data and emits object representations of\n     * CCSDS Space Packets once a packet has been completely received.\n     * @param {Object} [options] Configuration options for the stream\n     * @param {Number} options.timeCodeFieldLength The length of the time code field within the data\n     * @param {Number} options.ancillaryDataFieldLength The length of the ancillary data field within the data\n     */\n    constructor(options = {}) {\n        super({ ...options, objectMode: true });\n        // Set the constants for this Space Packet Connection; these will help us parse incoming data\n        // fields:\n        this.timeCodeFieldLength = options.timeCodeFieldLength || 0;\n        this.ancillaryDataFieldLength = options.ancillaryDataFieldLength || 0;\n        this.dataSlice = this.timeCodeFieldLength + this.ancillaryDataFieldLength;\n        // These are stateful based on the current packet being received:\n        this.dataBuffer = Buffer.alloc(0);\n        this.headerBuffer = Buffer.alloc(0);\n        this.dataLength = 0;\n        this.expectingHeader = true;\n    }\n    /**\n     * Bundle the header, secondary header if present, and the data into a JavaScript object to emit.\n     * If more data has been received past the current packet, begin the process of parsing the next\n     * packet(s).\n     */\n    pushCompletedPacket() {\n        if (!this.header) {\n            throw new Error('Missing header');\n        }\n        const timeCode = Buffer.from(this.dataBuffer.slice(0, this.timeCodeFieldLength));\n        const ancillaryData = Buffer.from(this.dataBuffer.slice(this.timeCodeFieldLength, this.timeCodeFieldLength + this.ancillaryDataFieldLength));\n        const data = Buffer.from(this.dataBuffer.slice(this.dataSlice, this.dataLength));\n        const completedPacket = {\n            header: { ...this.header },\n            data: data.toString(),\n        };\n        if (timeCode.length > 0 || ancillaryData.length > 0) {\n            completedPacket.secondaryHeader = {};\n            if (timeCode.length) {\n                completedPacket.secondaryHeader.timeCode = timeCode.toString();\n            }\n            if (ancillaryData.length) {\n                completedPacket.secondaryHeader.ancillaryData = ancillaryData.toString();\n            }\n        }\n        this.push(completedPacket);\n        // If there is an overflow (i.e. we have more data than the packet we just pushed) begin parsing\n        // the next packet.\n        const nextChunk = Buffer.from(this.dataBuffer.slice(this.dataLength));\n        if (nextChunk.length >= utils_1.HEADER_LENGTH) {\n            this.extractHeader(nextChunk);\n        }\n        else {\n            this.headerBuffer = nextChunk;\n            this.dataBuffer = Buffer.alloc(0);\n            this.expectingHeader = true;\n            this.dataLength = 0;\n            this.header = undefined;\n        }\n    }\n    /**\n     * Build the Stream's headerBuffer property from the received Buffer chunk; extract data from it\n     * if it's complete. If there's more to the chunk than just the header, initiate handling the\n     * packet data.\n     * @param chunk -  Build the Stream's headerBuffer property from\n     */\n    extractHeader(chunk) {\n        const headerAsBuffer = Buffer.concat([this.headerBuffer, chunk]);\n        const startOfDataBuffer = headerAsBuffer.slice(utils_1.HEADER_LENGTH);\n        if (headerAsBuffer.length >= utils_1.HEADER_LENGTH) {\n            this.header = (0, utils_1.convertHeaderBufferToObj)(headerAsBuffer);\n            this.dataLength = this.header.dataLength;\n            this.headerBuffer = Buffer.alloc(0);\n            this.expectingHeader = false;\n        }\n        else {\n            this.headerBuffer = headerAsBuffer;\n        }\n        if (startOfDataBuffer.length > 0) {\n            this.dataBuffer = Buffer.from(startOfDataBuffer);\n            if (this.dataBuffer.length >= this.dataLength) {\n                this.pushCompletedPacket();\n            }\n        }\n    }\n    _transform(chunk, encoding, cb) {\n        if (this.expectingHeader) {\n            this.extractHeader(chunk);\n        }\n        else {\n            this.dataBuffer = Buffer.concat([this.dataBuffer, chunk]);\n            if (this.dataBuffer.length >= this.dataLength) {\n                this.pushCompletedPacket();\n            }\n        }\n        cb();\n    }\n    _flush(cb) {\n        const remaining = Buffer.concat([this.headerBuffer, this.dataBuffer]);\n        const remainingArray = Array.from(remaining);\n        this.push(remainingArray);\n        cb();\n    }\n}\nexports.SpacePacketParser = SpacePacketParser;\n\n\n//# sourceURL=webpack://basic-socket/./node_modules/@serialport/parser-spacepacket/dist/index.js?");

/***/ }),

/***/ "./node_modules/@serialport/parser-spacepacket/dist/utils.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@serialport/parser-spacepacket/dist/utils.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.convertHeaderBufferToObj = exports.HEADER_LENGTH = void 0;\nexports.HEADER_LENGTH = 6;\n/**\n * For numbers less than 255, will ensure that their string representation is at least 8 characters long.\n */\nconst toOctetStr = (num) => {\n    let str = Number(num).toString(2);\n    while (str.length < 8) {\n        str = `0${str}`;\n    }\n    return str;\n};\n/**\n * Converts a Buffer of any length to an Object representation of a Space Packet header, provided\n * the received data is in the correct format.\n * @param buf - The buffer containing the Space Packet Header Data\n */\nconst convertHeaderBufferToObj = (buf) => {\n    const headerStr = Array.from(buf.slice(0, exports.HEADER_LENGTH)).reduce((accum, curr) => `${accum}${toOctetStr(curr)}`, '');\n    const isVersion1 = headerStr.slice(0, 3) === '000';\n    const versionNumber = isVersion1 ? 1 : 'UNKNOWN_VERSION';\n    const type = Number(headerStr[3]);\n    const secondaryHeader = Number(headerStr[4]);\n    const apid = parseInt(headerStr.slice(5, 16), 2);\n    const sequenceFlags = parseInt(headerStr.slice(16, 18), 2);\n    const packetName = parseInt(headerStr.slice(18, 32), 2);\n    const dataLength = parseInt(headerStr.slice(-16), 2) + 1;\n    return {\n        versionNumber,\n        identification: {\n            apid,\n            secondaryHeader,\n            type,\n        },\n        sequenceControl: {\n            packetName,\n            sequenceFlags,\n        },\n        dataLength,\n    };\n};\nexports.convertHeaderBufferToObj = convertHeaderBufferToObj;\n\n\n//# sourceURL=webpack://basic-socket/./node_modules/@serialport/parser-spacepacket/dist/utils.js?");

/***/ }),

/***/ "./node_modules/@serialport/stream/dist/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@serialport/stream/dist/index.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SerialPortStream = exports.DisconnectedError = void 0;\nconst stream_1 = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'stream'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"./node_modules/debug/src/browser.js\"));\nconst debug = (0, debug_1.default)('serialport/stream');\nclass DisconnectedError extends Error {\n    constructor(message) {\n        super(message);\n        this.disconnected = true;\n    }\n}\nexports.DisconnectedError = DisconnectedError;\nconst defaultSetFlags = {\n    brk: false,\n    cts: false,\n    dtr: true,\n    rts: true,\n};\nfunction allocNewReadPool(poolSize) {\n    const pool = Buffer.allocUnsafe(poolSize);\n    pool.used = 0;\n    return pool;\n}\nclass SerialPortStream extends stream_1.Duplex {\n    /**\n     * Create a new serial port object for the `path`. In the case of invalid arguments or invalid options, when constructing a new SerialPort it will throw an error. The port will open automatically by default, which is the equivalent of calling `port.open(openCallback)` in the next tick. You can disable this by setting the option `autoOpen` to `false`.\n     * @emits open\n     * @emits data\n     * @emits close\n     * @emits error\n     */\n    constructor(options, openCallback) {\n        const settings = {\n            autoOpen: true,\n            endOnClose: false,\n            highWaterMark: 64 * 1024,\n            ...options,\n        };\n        super({\n            highWaterMark: settings.highWaterMark,\n        });\n        if (!settings.binding) {\n            throw new TypeError('\"Bindings\" is invalid pass it as `options.binding`');\n        }\n        if (!settings.path) {\n            throw new TypeError(`\"path\" is not defined: ${settings.path}`);\n        }\n        if (typeof settings.baudRate !== 'number') {\n            throw new TypeError(`\"baudRate\" must be a number: ${settings.baudRate}`);\n        }\n        this.settings = settings;\n        this.opening = false;\n        this.closing = false;\n        this._pool = allocNewReadPool(this.settings.highWaterMark);\n        this._kMinPoolSpace = 128;\n        if (this.settings.autoOpen) {\n            this.open(openCallback);\n        }\n    }\n    get path() {\n        return this.settings.path;\n    }\n    get baudRate() {\n        return this.settings.baudRate;\n    }\n    get isOpen() {\n        var _a, _b;\n        return ((_b = (_a = this.port) === null || _a === void 0 ? void 0 : _a.isOpen) !== null && _b !== void 0 ? _b : false) && !this.closing;\n    }\n    _error(error, callback) {\n        if (callback) {\n            callback.call(this, error);\n        }\n        else {\n            this.emit('error', error);\n        }\n    }\n    _asyncError(error, callback) {\n        process.nextTick(() => this._error(error, callback));\n    }\n    /**\n     * Opens a connection to the given serial port.\n     * @param {ErrorCallback=} openCallback - Called after a connection is opened. If this is not provided and an error occurs, it will be emitted on the port's `error` event.\n     * @emits open\n     */\n    open(openCallback) {\n        if (this.isOpen) {\n            return this._asyncError(new Error('Port is already open'), openCallback);\n        }\n        if (this.opening) {\n            return this._asyncError(new Error('Port is opening'), openCallback);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { highWaterMark, binding, autoOpen, endOnClose, ...openOptions } = this.settings;\n        this.opening = true;\n        debug('opening', `path: ${this.path}`);\n        this.settings.binding.open(openOptions).then(port => {\n            debug('opened', `path: ${this.path}`);\n            this.port = port;\n            this.opening = false;\n            this.emit('open');\n            if (openCallback) {\n                openCallback.call(this, null);\n            }\n        }, err => {\n            this.opening = false;\n            debug('Binding #open had an error', err);\n            this._error(err, openCallback);\n        });\n    }\n    /**\n     * Changes the baud rate for an open port. Emits an error or calls the callback if the baud rate isn't supported.\n     * @param {object=} options Only supports `baudRate`.\n     * @param {number=} [options.baudRate] The baud rate of the port to be opened. This should match one of the commonly available baud rates, such as 110, 300, 1200, 2400, 4800, 9600, 14400, 19200, 38400, 57600, or 115200. Custom rates are supported best effort per platform. The device connected to the serial port is not guaranteed to support the requested baud rate, even if the port itself supports that baud rate.\n     * @param {ErrorCallback=} [callback] Called once the port's baud rate changes. If `.update` is called without a callback, and there is an error, an error event is emitted.\n     * @returns {undefined}\n     */\n    update(options, callback) {\n        if (!this.isOpen || !this.port) {\n            debug('update attempted, but port is not open');\n            return this._asyncError(new Error('Port is not open'), callback);\n        }\n        debug('update', `baudRate: ${options.baudRate}`);\n        this.port.update(options).then(() => {\n            debug('binding.update', 'finished');\n            this.settings.baudRate = options.baudRate;\n            if (callback) {\n                callback.call(this, null);\n            }\n        }, err => {\n            debug('binding.update', 'error', err);\n            return this._error(err, callback);\n        });\n    }\n    write(data, encoding, callback) {\n        if (Array.isArray(data)) {\n            data = Buffer.from(data);\n        }\n        if (typeof encoding === 'function') {\n            return super.write(data, encoding);\n        }\n        return super.write(data, encoding, callback);\n    }\n    _write(data, encoding, callback) {\n        if (!this.isOpen || !this.port) {\n            this.once('open', () => {\n                this._write(data, encoding, callback);\n            });\n            return;\n        }\n        debug('_write', `${data.length} bytes of data`);\n        this.port.write(data).then(() => {\n            debug('binding.write', 'write finished');\n            callback(null);\n        }, err => {\n            debug('binding.write', 'error', err);\n            if (!err.canceled) {\n                this._disconnected(err);\n            }\n            callback(err);\n        });\n    }\n    _writev(data, callback) {\n        debug('_writev', `${data.length} chunks of data`);\n        const dataV = data.map(write => write.chunk);\n        this._write(Buffer.concat(dataV), undefined, callback);\n    }\n    _read(bytesToRead) {\n        if (!this.isOpen || !this.port) {\n            debug('_read', 'queueing _read for after open');\n            this.once('open', () => {\n                this._read(bytesToRead);\n            });\n            return;\n        }\n        if (!this._pool || this._pool.length - this._pool.used < this._kMinPoolSpace) {\n            debug('_read', 'discarding the read buffer pool because it is below kMinPoolSpace');\n            this._pool = allocNewReadPool(this.settings.highWaterMark);\n        }\n        // Grab another reference to the pool in the case that while we're\n        // in the thread pool another read() finishes up the pool, and\n        // allocates a new one.\n        const pool = this._pool;\n        // Read the smaller of rest of the pool or however many bytes we want\n        const toRead = Math.min(pool.length - pool.used, bytesToRead);\n        const start = pool.used;\n        // the actual read.\n        debug('_read', `reading`, { start, toRead });\n        this.port.read(pool, start, toRead).then(({ bytesRead }) => {\n            debug('binding.read', `finished`, { bytesRead });\n            // zero bytes means read means we've hit EOF? Maybe this should be an error\n            if (bytesRead === 0) {\n                debug('binding.read', 'Zero bytes read closing readable stream');\n                this.push(null);\n                return;\n            }\n            pool.used += bytesRead;\n            this.push(pool.slice(start, start + bytesRead));\n        }, err => {\n            debug('binding.read', `error`, err);\n            if (!err.canceled) {\n                this._disconnected(err);\n            }\n            this._read(bytesToRead); // prime to read more once we're reconnected\n        });\n    }\n    _disconnected(err) {\n        if (!this.isOpen) {\n            debug('disconnected aborted because already closed', err);\n            return;\n        }\n        debug('disconnected', err);\n        this.close(undefined, new DisconnectedError(err.message));\n    }\n    /**\n     * Closes an open connection.\n     *\n     * If there are in progress writes when the port is closed the writes will error.\n     * @param {ErrorCallback} callback Called once a connection is closed.\n     * @param {Error} disconnectError used internally to propagate a disconnect error\n     */\n    close(callback, disconnectError = null) {\n        if (!this.isOpen || !this.port) {\n            debug('close attempted, but port is not open');\n            return this._asyncError(new Error('Port is not open'), callback);\n        }\n        this.closing = true;\n        debug('#close');\n        this.port.close().then(() => {\n            this.closing = false;\n            debug('binding.close', 'finished');\n            this.emit('close', disconnectError);\n            if (this.settings.endOnClose) {\n                this.emit('end');\n            }\n            if (callback) {\n                callback.call(this, disconnectError);\n            }\n        }, err => {\n            this.closing = false;\n            debug('binding.close', 'had an error', err);\n            return this._error(err, callback);\n        });\n    }\n    /**\n     * Set control flags on an open port. Uses [`SetCommMask`](https://msdn.microsoft.com/en-us/library/windows/desktop/aa363257(v=vs.85).aspx) for Windows and [`ioctl`](http://linux.die.net/man/4/tty_ioctl) for OS X and Linux.\n     *\n     * All options are operating system default when the port is opened. Every flag is set on each call to the provided or default values. If options isn't provided default options is used.\n     */\n    set(options, callback) {\n        if (!this.isOpen || !this.port) {\n            debug('set attempted, but port is not open');\n            return this._asyncError(new Error('Port is not open'), callback);\n        }\n        const settings = { ...defaultSetFlags, ...options };\n        debug('#set', settings);\n        this.port.set(settings).then(() => {\n            debug('binding.set', 'finished');\n            if (callback) {\n                callback.call(this, null);\n            }\n        }, err => {\n            debug('binding.set', 'had an error', err);\n            return this._error(err, callback);\n        });\n    }\n    /**\n     * Returns the control flags (CTS, DSR, DCD) on the open port.\n     * Uses [`GetCommModemStatus`](https://msdn.microsoft.com/en-us/library/windows/desktop/aa363258(v=vs.85).aspx) for Windows and [`ioctl`](http://linux.die.net/man/4/tty_ioctl) for mac and linux.\n     */\n    get(callback) {\n        if (!this.isOpen || !this.port) {\n            debug('get attempted, but port is not open');\n            return this._asyncError(new Error('Port is not open'), callback);\n        }\n        debug('#get');\n        this.port.get().then(status => {\n            debug('binding.get', 'finished');\n            callback.call(this, null, status);\n        }, err => {\n            debug('binding.get', 'had an error', err);\n            return this._error(err, callback);\n        });\n    }\n    /**\n     * Flush discards data received but not read, and written but not transmitted by the operating system. For more technical details, see [`tcflush(fd, TCIOFLUSH)`](http://linux.die.net/man/3/tcflush) for Mac/Linux and [`FlushFileBuffers`](http://msdn.microsoft.com/en-us/library/windows/desktop/aa364439) for Windows.\n     */\n    flush(callback) {\n        if (!this.isOpen || !this.port) {\n            debug('flush attempted, but port is not open');\n            return this._asyncError(new Error('Port is not open'), callback);\n        }\n        debug('#flush');\n        this.port.flush().then(() => {\n            debug('binding.flush', 'finished');\n            if (callback) {\n                callback.call(this, null);\n            }\n        }, err => {\n            debug('binding.flush', 'had an error', err);\n            return this._error(err, callback);\n        });\n    }\n    /**\n     * Waits until all output data is transmitted to the serial port. After any pending write has completed it calls [`tcdrain()`](http://linux.die.net/man/3/tcdrain) or [FlushFileBuffers()](https://msdn.microsoft.com/en-us/library/windows/desktop/aa364439(v=vs.85).aspx) to ensure it has been written to the device.\n    * @example\n    Write the `data` and wait until it has finished transmitting to the target serial port before calling the callback. This will queue until the port is open and writes are finished.\n  \n    ```js\n    function writeAndDrain (data, callback) {\n      port.write(data);\n      port.drain(callback);\n    }\n    ```\n    */\n    drain(callback) {\n        debug('drain');\n        if (!this.isOpen || !this.port) {\n            debug('drain queuing on port open');\n            this.once('open', () => {\n                this.drain(callback);\n            });\n            return;\n        }\n        this.port.drain().then(() => {\n            debug('binding.drain', 'finished');\n            if (callback) {\n                callback.call(this, null);\n            }\n        }, err => {\n            debug('binding.drain', 'had an error', err);\n            return this._error(err, callback);\n        });\n    }\n}\nexports.SerialPortStream = SerialPortStream;\n/**\n * The `error` event's callback is called with an error object whenever there is an error.\n * @event error\n */\n/**\n * The `open` event's callback is called with no arguments when the port is opened and ready for writing. This happens if you have the constructor open immediately (which opens in the next tick) or if you open the port manually with `open()`. See [Useage/Opening a Port](#opening-a-port) for more information.\n * @event open\n */\n/**\n * Request a number of bytes from the SerialPort. The `read()` method pulls some data out of the internal buffer and returns it. If no data is available to be read, null is returned. By default, the data is returned as a `Buffer` object unless an encoding has been specified using the `.setEncoding()` method.\n * @method SerialPort.prototype.read\n * @param {number=} size Specify how many bytes of data to return, if available\n * @returns {(string|Buffer|null)} The data from internal buffers\n */\n/**\n * Listening for the `data` event puts the port in flowing mode. Data is emitted as soon as it's received. Data is a `Buffer` object with a varying amount of data in it. The `readLine` parser converts the data into string lines. See the [parsers](https://serialport.io/docs/api-parsers-overview) section for more information on parsers, and the [Node.js stream documentation](https://nodejs.org/api/stream.html#stream_event_data) for more information on the data event.\n * @event data\n */\n/**\n * The `close` event's callback is called with no arguments when the port is closed. In the case of a disconnect it will be called with a Disconnect Error object (`err.disconnected == true`). In the event of a close error (unlikely), an error event is triggered.\n * @event close\n */\n/**\n * The `pause()` method causes a stream in flowing mode to stop emitting 'data' events, switching out of flowing mode. Any data that becomes available remains in the internal buffer.\n * @method SerialPort.prototype.pause\n * @see resume\n * @returns `this`\n */\n/**\n * The `resume()` method causes an explicitly paused, `Readable` stream to resume emitting 'data' events, switching the stream into flowing mode.\n * @method SerialPort.prototype.resume\n * @see pause\n * @returns `this`\n */\n\n\n//# sourceURL=webpack://basic-socket/./node_modules/@serialport/stream/dist/index.js?");

/***/ }),

/***/ "./node_modules/debug/src/browser.js":
/*!*******************************************!*\
  !*** ./node_modules/debug/src/browser.js ***!
  \*******************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\n\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\nexports.destroy = (() => {\n\tlet warned = false;\n\n\treturn () => {\n\t\tif (!warned) {\n\t\t\twarned = true;\n\t\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t\t}\n\t};\n})();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n\t'#0000CC',\n\t'#0000FF',\n\t'#0033CC',\n\t'#0033FF',\n\t'#0066CC',\n\t'#0066FF',\n\t'#0099CC',\n\t'#0099FF',\n\t'#00CC00',\n\t'#00CC33',\n\t'#00CC66',\n\t'#00CC99',\n\t'#00CCCC',\n\t'#00CCFF',\n\t'#3300CC',\n\t'#3300FF',\n\t'#3333CC',\n\t'#3333FF',\n\t'#3366CC',\n\t'#3366FF',\n\t'#3399CC',\n\t'#3399FF',\n\t'#33CC00',\n\t'#33CC33',\n\t'#33CC66',\n\t'#33CC99',\n\t'#33CCCC',\n\t'#33CCFF',\n\t'#6600CC',\n\t'#6600FF',\n\t'#6633CC',\n\t'#6633FF',\n\t'#66CC00',\n\t'#66CC33',\n\t'#9900CC',\n\t'#9900FF',\n\t'#9933CC',\n\t'#9933FF',\n\t'#99CC00',\n\t'#99CC33',\n\t'#CC0000',\n\t'#CC0033',\n\t'#CC0066',\n\t'#CC0099',\n\t'#CC00CC',\n\t'#CC00FF',\n\t'#CC3300',\n\t'#CC3333',\n\t'#CC3366',\n\t'#CC3399',\n\t'#CC33CC',\n\t'#CC33FF',\n\t'#CC6600',\n\t'#CC6633',\n\t'#CC9900',\n\t'#CC9933',\n\t'#CCCC00',\n\t'#CCCC33',\n\t'#FF0000',\n\t'#FF0033',\n\t'#FF0066',\n\t'#FF0099',\n\t'#FF00CC',\n\t'#FF00FF',\n\t'#FF3300',\n\t'#FF3333',\n\t'#FF3366',\n\t'#FF3399',\n\t'#FF33CC',\n\t'#FF33FF',\n\t'#FF6600',\n\t'#FF6633',\n\t'#FF9900',\n\t'#FF9933',\n\t'#FFCC00',\n\t'#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\n// eslint-disable-next-line complexity\nfunction useColors() {\n\t// NB: In an Electron preload script, document will be defined but not fully\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\n\t// explicitly\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n\t\treturn true;\n\t}\n\n\t// Internet Explorer and Edge do not support colors.\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n\t\treturn false;\n\t}\n\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n\t\t// Is firefox >= v31?\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n\t\t// Double check webkit in userAgent just in case we are in a worker\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\targs[0] = (this.useColors ? '%c' : '') +\n\t\tthis.namespace +\n\t\t(this.useColors ? ' %c' : ' ') +\n\t\targs[0] +\n\t\t(this.useColors ? '%c ' : ' ') +\n\t\t'+' + module.exports.humanize(this.diff);\n\n\tif (!this.useColors) {\n\t\treturn;\n\t}\n\n\tconst c = 'color: ' + this.color;\n\targs.splice(1, 0, c, 'color: inherit');\n\n\t// The final \"%c\" is somewhat tricky, because there could be other\n\t// arguments passed either before or after the %c, so we need to\n\t// figure out the correct index to insert the CSS into\n\tlet index = 0;\n\tlet lastC = 0;\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\n\t\tif (match === '%%') {\n\t\t\treturn;\n\t\t}\n\t\tindex++;\n\t\tif (match === '%c') {\n\t\t\t// We only are interested in the *last* %c\n\t\t\t// (the user may have provided their own)\n\t\t\tlastC = index;\n\t\t}\n\t});\n\n\targs.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.debug()` when available.\n * No-op when `console.debug` is not a \"function\".\n * If `console.debug` is not available, falls back\n * to `console.log`.\n *\n * @api public\n */\nexports.log = console.debug || console.log || (() => {});\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\ttry {\n\t\tif (namespaces) {\n\t\t\texports.storage.setItem('debug', namespaces);\n\t\t} else {\n\t\t\texports.storage.removeItem('debug');\n\t\t}\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\nfunction load() {\n\tlet r;\n\ttry {\n\t\tr = exports.storage.getItem('debug');\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\tr = process.env.DEBUG;\n\t}\n\n\treturn r;\n}\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n\ttry {\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n\t\t// The Browser also has localStorage in the global context.\n\t\treturn localStorage;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\nmodule.exports = __webpack_require__(/*! ./common */ \"./node_modules/debug/src/common.js\")(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n\ttry {\n\t\treturn JSON.stringify(v);\n\t} catch (error) {\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\n\t}\n};\n\n\n//# sourceURL=webpack://basic-socket/./node_modules/debug/src/browser.js?");

/***/ }),

/***/ "./node_modules/debug/src/common.js":
/*!******************************************!*\
  !*** ./node_modules/debug/src/common.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = __webpack_require__(/*! ms */ \"./node_modules/ms/index.js\");\n\tcreateDebug.destroy = destroy;\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\t\tlet enableOverride = null;\n\t\tlet namespacesCache;\n\t\tlet enabledCache;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn '%';\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = createDebug.selectColor(namespace);\n\t\tdebug.extend = extend;\n\t\tdebug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\n\n\t\tObject.defineProperty(debug, 'enabled', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: false,\n\t\t\tget: () => {\n\t\t\t\tif (enableOverride !== null) {\n\t\t\t\t\treturn enableOverride;\n\t\t\t\t}\n\t\t\t\tif (namespacesCache !== createDebug.namespaces) {\n\t\t\t\t\tnamespacesCache = createDebug.namespaces;\n\t\t\t\t\tenabledCache = createDebug.enabled(namespace);\n\t\t\t\t}\n\n\t\t\t\treturn enabledCache;\n\t\t\t},\n\t\t\tset: v => {\n\t\t\t\tenableOverride = v;\n\t\t\t}\n\t\t});\n\n\t\t// Env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\treturn debug;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t\tnewDebug.log = this.log;\n\t\treturn newDebug;\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\t\tcreateDebug.namespaces = namespaces;\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tlet i;\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n\t\tconst len = split.length;\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tif (!split[i]) {\n\t\t\t\t// ignore empty strings\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tnamespaces = split[i].replace(/\\*/g, '.*?');\n\n\t\t\tif (namespaces[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(new RegExp('^' + namespaces + '$'));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names.map(toNamespace),\n\t\t\t...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tif (name[name.length - 1] === '*') {\n\t\t\treturn true;\n\t\t}\n\n\t\tlet i;\n\t\tlet len;\n\n\t\tfor (i = 0, len = createDebug.skips.length; i < len; i++) {\n\t\t\tif (createDebug.skips[i].test(name)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0, len = createDebug.names.length; i < len; i++) {\n\t\t\tif (createDebug.names[i].test(name)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Convert regexp to namespace\n\t*\n\t* @param {RegExp} regxep\n\t* @return {String} namespace\n\t* @api private\n\t*/\n\tfunction toNamespace(regexp) {\n\t\treturn regexp.toString()\n\t\t\t.substring(2, regexp.toString().length - 2)\n\t\t\t.replace(/\\.\\*\\?$/, '*');\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\t/**\n\t* XXX DO NOT USE. This is a temporary stub function.\n\t* XXX It WILL be removed in the next major release.\n\t*/\n\tfunction destroy() {\n\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n\n\n//# sourceURL=webpack://basic-socket/./node_modules/debug/src/common.js?");

/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/***/ ((module) => {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n\n\n//# sourceURL=webpack://basic-socket/./node_modules/events/events.js?");

/***/ }),

/***/ "./node_modules/ms/index.js":
/*!**********************************!*\
  !*** ./node_modules/ms/index.js ***!
  \**********************************/
/***/ ((module) => {

eval("/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n\n\n//# sourceURL=webpack://basic-socket/./node_modules/ms/index.js?");

/***/ }),

/***/ "./node_modules/node-gyp-build/index.js":
/*!**********************************************!*\
  !*** ./node_modules/node-gyp-build/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("if (typeof process.addon === 'function') { // if the platform supports native resolving prefer that\n  module.exports = process.addon.bind(process)\n} else { // else use the runtime version here\n  module.exports = __webpack_require__(/*! ./node-gyp-build.js */ \"./node_modules/node-gyp-build/node-gyp-build.js\")\n}\n\n\n//# sourceURL=webpack://basic-socket/./node_modules/node-gyp-build/index.js?");

/***/ }),

/***/ "./node_modules/node-gyp-build/node-gyp-build.js":
/*!*******************************************************!*\
  !*** ./node_modules/node-gyp-build/node-gyp-build.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var fs = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'fs'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()))\nvar path = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'path'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()))\nvar os = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'os'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()))\n\n// Workaround to fix webpack's build warnings: 'the request of a dependency is an expression'\nvar runtimeRequire =  true ? require : 0 // eslint-disable-line\n\nvar vars = (process.config && process.config.variables) || {}\nvar prebuildsOnly = !!process.env.PREBUILDS_ONLY\nvar abi = process.versions.modules // TODO: support old node where this is undef\nvar runtime = isElectron() ? 'electron' : (isNwjs() ? 'node-webkit' : 'node')\n\nvar arch = process.env.npm_config_arch || os.arch()\nvar platform = process.env.npm_config_platform || os.platform()\nvar libc = process.env.LIBC || (isAlpine(platform) ? 'musl' : 'glibc')\nvar armv = process.env.ARM_VERSION || (arch === 'arm64' ? '8' : vars.arm_version) || ''\nvar uv = (process.versions.uv || '').split('.')[0]\n\nmodule.exports = load\n\nfunction load (dir) {\n  return runtimeRequire(load.resolve(dir))\n}\n\nload.resolve = load.path = function (dir) {\n  dir = path.resolve(dir || '.')\n\n  try {\n    var name = runtimeRequire(path.join(dir, 'package.json')).name.toUpperCase().replace(/-/g, '_')\n    if (process.env[name + '_PREBUILD']) dir = process.env[name + '_PREBUILD']\n  } catch (err) {}\n\n  if (!prebuildsOnly) {\n    var release = getFirst(path.join(dir, 'build/Release'), matchBuild)\n    if (release) return release\n\n    var debug = getFirst(path.join(dir, 'build/Debug'), matchBuild)\n    if (debug) return debug\n  }\n\n  var prebuild = resolve(dir)\n  if (prebuild) return prebuild\n\n  var nearby = resolve(path.dirname(process.execPath))\n  if (nearby) return nearby\n\n  var target = [\n    'platform=' + platform,\n    'arch=' + arch,\n    'runtime=' + runtime,\n    'abi=' + abi,\n    'uv=' + uv,\n    armv ? 'armv=' + armv : '',\n    'libc=' + libc,\n    'node=' + process.versions.node,\n    process.versions.electron ? 'electron=' + process.versions.electron : '',\n     true ? 'webpack=true' : 0 // eslint-disable-line\n  ].filter(Boolean).join(' ')\n\n  throw new Error('No native build was found for ' + target + '\\n    loaded from: ' + dir + '\\n')\n\n  function resolve (dir) {\n    // Find matching \"prebuilds/<platform>-<arch>\" directory\n    var tuples = readdirSync(path.join(dir, 'prebuilds')).map(parseTuple)\n    var tuple = tuples.filter(matchTuple(platform, arch)).sort(compareTuples)[0]\n    if (!tuple) return\n\n    // Find most specific flavor first\n    var prebuilds = path.join(dir, 'prebuilds', tuple.name)\n    var parsed = readdirSync(prebuilds).map(parseTags)\n    var candidates = parsed.filter(matchTags(runtime, abi))\n    var winner = candidates.sort(compareTags(runtime))[0]\n    if (winner) return path.join(prebuilds, winner.file)\n  }\n}\n\nfunction readdirSync (dir) {\n  try {\n    return fs.readdirSync(dir)\n  } catch (err) {\n    return []\n  }\n}\n\nfunction getFirst (dir, filter) {\n  var files = readdirSync(dir).filter(filter)\n  return files[0] && path.join(dir, files[0])\n}\n\nfunction matchBuild (name) {\n  return /\\.node$/.test(name)\n}\n\nfunction parseTuple (name) {\n  // Example: darwin-x64+arm64\n  var arr = name.split('-')\n  if (arr.length !== 2) return\n\n  var platform = arr[0]\n  var architectures = arr[1].split('+')\n\n  if (!platform) return\n  if (!architectures.length) return\n  if (!architectures.every(Boolean)) return\n\n  return { name, platform, architectures }\n}\n\nfunction matchTuple (platform, arch) {\n  return function (tuple) {\n    if (tuple == null) return false\n    if (tuple.platform !== platform) return false\n    return tuple.architectures.includes(arch)\n  }\n}\n\nfunction compareTuples (a, b) {\n  // Prefer single-arch prebuilds over multi-arch\n  return a.architectures.length - b.architectures.length\n}\n\nfunction parseTags (file) {\n  var arr = file.split('.')\n  var extension = arr.pop()\n  var tags = { file: file, specificity: 0 }\n\n  if (extension !== 'node') return\n\n  for (var i = 0; i < arr.length; i++) {\n    var tag = arr[i]\n\n    if (tag === 'node' || tag === 'electron' || tag === 'node-webkit') {\n      tags.runtime = tag\n    } else if (tag === 'napi') {\n      tags.napi = true\n    } else if (tag.slice(0, 3) === 'abi') {\n      tags.abi = tag.slice(3)\n    } else if (tag.slice(0, 2) === 'uv') {\n      tags.uv = tag.slice(2)\n    } else if (tag.slice(0, 4) === 'armv') {\n      tags.armv = tag.slice(4)\n    } else if (tag === 'glibc' || tag === 'musl') {\n      tags.libc = tag\n    } else {\n      continue\n    }\n\n    tags.specificity++\n  }\n\n  return tags\n}\n\nfunction matchTags (runtime, abi) {\n  return function (tags) {\n    if (tags == null) return false\n    if (tags.runtime !== runtime && !runtimeAgnostic(tags)) return false\n    if (tags.abi !== abi && !tags.napi) return false\n    if (tags.uv && tags.uv !== uv) return false\n    if (tags.armv && tags.armv !== armv) return false\n    if (tags.libc && tags.libc !== libc) return false\n\n    return true\n  }\n}\n\nfunction runtimeAgnostic (tags) {\n  return tags.runtime === 'node' && tags.napi\n}\n\nfunction compareTags (runtime) {\n  // Precedence: non-agnostic runtime, abi over napi, then by specificity.\n  return function (a, b) {\n    if (a.runtime !== b.runtime) {\n      return a.runtime === runtime ? -1 : 1\n    } else if (a.abi !== b.abi) {\n      return a.abi ? -1 : 1\n    } else if (a.specificity !== b.specificity) {\n      return a.specificity > b.specificity ? -1 : 1\n    } else {\n      return 0\n    }\n  }\n}\n\nfunction isNwjs () {\n  return !!(process.versions && process.versions.nw)\n}\n\nfunction isElectron () {\n  if (process.versions && process.versions.electron) return true\n  if (process.env.ELECTRON_RUN_AS_NODE) return true\n  return typeof window !== 'undefined' && window.process && window.process.type === 'renderer'\n}\n\nfunction isAlpine (platform) {\n  return platform === 'linux' && fs.existsSync('/etc/alpine-release')\n}\n\n// Exposed for unit tests\n// TODO: move to lib\nload.parseTags = parseTags\nload.matchTags = matchTags\nload.compareTags = compareTags\nload.parseTuple = parseTuple\nload.matchTuple = matchTuple\nload.compareTuples = compareTuples\n\n\n//# sourceURL=webpack://basic-socket/./node_modules/node-gyp-build/node-gyp-build.js?");

/***/ }),

/***/ "./node_modules/serialport/dist/index.js":
/*!***********************************************!*\
  !*** ./node_modules/serialport/dist/index.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! @serialport/parser-byte-length */ \"./node_modules/@serialport/parser-byte-length/dist/index.js\"), exports);\n__exportStar(__webpack_require__(/*! @serialport/parser-cctalk */ \"./node_modules/@serialport/parser-cctalk/dist/index.js\"), exports);\n__exportStar(__webpack_require__(/*! @serialport/parser-delimiter */ \"./node_modules/@serialport/parser-delimiter/dist/index.js\"), exports);\n__exportStar(__webpack_require__(/*! @serialport/parser-inter-byte-timeout */ \"./node_modules/@serialport/parser-inter-byte-timeout/dist/index.js\"), exports);\n__exportStar(__webpack_require__(/*! @serialport/parser-packet-length */ \"./node_modules/@serialport/parser-packet-length/dist/index.js\"), exports);\n__exportStar(__webpack_require__(/*! @serialport/parser-readline */ \"./node_modules/@serialport/parser-readline/dist/index.js\"), exports);\n__exportStar(__webpack_require__(/*! @serialport/parser-ready */ \"./node_modules/@serialport/parser-ready/dist/index.js\"), exports);\n__exportStar(__webpack_require__(/*! @serialport/parser-regex */ \"./node_modules/@serialport/parser-regex/dist/index.js\"), exports);\n__exportStar(__webpack_require__(/*! @serialport/parser-slip-encoder */ \"./node_modules/@serialport/parser-slip-encoder/dist/index.js\"), exports);\n__exportStar(__webpack_require__(/*! @serialport/parser-spacepacket */ \"./node_modules/@serialport/parser-spacepacket/dist/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./serialport-mock */ \"./node_modules/serialport/dist/serialport-mock.js\"), exports);\n__exportStar(__webpack_require__(/*! ./serialport */ \"./node_modules/serialport/dist/serialport.js\"), exports);\n\n\n//# sourceURL=webpack://basic-socket/./node_modules/serialport/dist/index.js?");

/***/ }),

/***/ "./node_modules/serialport/dist/serialport-mock.js":
/*!*********************************************************!*\
  !*** ./node_modules/serialport/dist/serialport-mock.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SerialPortMock = void 0;\nconst stream_1 = __webpack_require__(/*! @serialport/stream */ \"./node_modules/@serialport/stream/dist/index.js\");\nconst binding_mock_1 = __webpack_require__(/*! @serialport/binding-mock */ \"./node_modules/@serialport/binding-mock/dist/index.js\");\nclass SerialPortMock extends stream_1.SerialPortStream {\n    constructor(options, openCallback) {\n        const opts = {\n            binding: binding_mock_1.MockBinding,\n            ...options,\n        };\n        super(opts, openCallback);\n    }\n}\nexports.SerialPortMock = SerialPortMock;\nSerialPortMock.list = binding_mock_1.MockBinding.list;\nSerialPortMock.binding = binding_mock_1.MockBinding;\n\n\n//# sourceURL=webpack://basic-socket/./node_modules/serialport/dist/serialport-mock.js?");

/***/ }),

/***/ "./node_modules/serialport/dist/serialport.js":
/*!****************************************************!*\
  !*** ./node_modules/serialport/dist/serialport.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SerialPort = void 0;\nconst stream_1 = __webpack_require__(/*! @serialport/stream */ \"./node_modules/@serialport/stream/dist/index.js\");\nconst bindings_cpp_1 = __webpack_require__(/*! @serialport/bindings-cpp */ \"./node_modules/@serialport/bindings-cpp/dist/index.js\");\nconst DetectedBinding = (0, bindings_cpp_1.autoDetect)();\nclass SerialPort extends stream_1.SerialPortStream {\n    constructor(options, openCallback) {\n        const opts = {\n            binding: DetectedBinding,\n            ...options,\n        };\n        super(opts, openCallback);\n    }\n}\nexports.SerialPort = SerialPort;\nSerialPort.list = DetectedBinding.list;\nSerialPort.binding = DetectedBinding;\n\n\n//# sourceURL=webpack://basic-socket/./node_modules/serialport/dist/serialport.js?");

/***/ }),

/***/ "./display.js":
/*!********************!*\
  !*** ./display.js ***!
  \********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var serialport__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! serialport */ \"./node_modules/serialport/dist/index.js\");\nconst inputArray = document.querySelector(\"#box\");\r\nconst outputText = document.querySelector(\"#outputText\");\r\n\r\n// Variable declaration\r\nlet output = \"0\";\r\nlet lightIntensity = 48;\r\nlet lightTreshold = 100;\r\nlet data = [220,210,250,20,250,40,10,230,30];\r\nlet dataBin = \"\";\r\n\r\n\r\nfunction displayArray() { \r\n    let txt = \"\";\r\n    let k = 0;\r\n\r\n    for (let i=0; i<=2; i++){\r\n        txt += \"<div id='row'>\";\r\n        for (let j=0; j<=2; j++){\r\n            lightIntensity = data[k];\r\n            \r\n            txt += '<p id=\"boxes\" style=\"background-color:rgb(' + lightIntensity + ', 0, ' + (255-lightIntensity) + '); font-size:25px;color:white\">' + lightIntensity + '</p>';\r\n            \r\n            k++;\r\n        }\r\n        \r\n        txt += \"</div>\";\r\n    }\r\n\r\n    inputArray.innerHTML = txt;\r\n}\r\n\r\nfunction inputArrayToTextOutput() {\r\n\r\n    \r\n    for (let i=0; i<data.length; i++){ \r\n        if (data[i] >= lightTreshold)\r\n            dataBin += \"1\";\r\n        else if (data[i] < lightTreshold)\r\n            dataBin += \"0\";\r\n    }\r\n    \r\n    switch (dataBin) { // Letter recognition\r\n        case \"111010010\": \r\n            output = \"T\";\r\n            break;\r\n        case \"101111101\":\r\n            output = \"H\";\r\n            break;\r\n        case \"111101001\":\r\n            output = \"7\";\r\n            break;\r\n        default:\r\n            output = \"Unknow\";\r\n      }\r\n}\r\n\r\nfunction textOutput() {\r\n    let txt = \"<p id='outputResult'style='font-size:75px; color:white'>\";\r\n    txt += output;\r\n    txt += \"</p>\";\r\n    outputText.innerHTML = txt;\r\n}\r\n\r\n// Initialization \r\ndocument.addEventListener(\"DOMContentLoaded\", (event) => {\r\n    displayArray();\r\n    inputArrayToTextOutput();\r\n    textOutput();\r\n});\r\n\r\n\r\n\r\nconst port = new serialport__WEBPACK_IMPORTED_MODULE_0__.SerialPort('COM9', { baudRate: 9600 });\r\n\r\nport.on('data', (data) => {\r\n    console.log(data);\r\n\r\n  \r\n});\r\n\r\n\r\n\n\n//# sourceURL=webpack://basic-socket/./display.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./display.js");
/******/ 	
/******/ })()
;